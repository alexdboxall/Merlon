
libc/x86/libc.a(byteswap.o):	file format elf32-i386

Disassembly of section .text.bswap_16:

00000000 <bswap_16>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 86 e0                        	xchg	ah, al
       9: c3                           	ret

Disassembly of section .text.bswap_32:

00000000 <bswap_32>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 0f c8                        	bswap	eax
       9: c3                           	ret

Disassembly of section .text.bswap_64:

00000000 <bswap_64>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       6: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
       9: 5d                           	pop	ebp
       a: 0f ca                        	bswap	edx
       c: 0f c8                        	bswap	eax
       e: c3                           	ret

libc/x86/libc.a(ctype.o):	file format elf32-i386

Disassembly of section .text.toupper:

00000000 <toupper>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 8d 50 9f                     	lea	edx, [eax - 97]
       9: 83 fa 19                     	cmp	edx, 25
       c: 77 03                        	ja	0x11 <toupper+0x11>
       e: 83 e8 20                     	sub	eax, 32
      11: 5d                           	pop	ebp
      12: c3                           	ret

Disassembly of section .text.tolower:

00000000 <tolower>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 8d 50 bf                     	lea	edx, [eax - 65]
       9: 83 fa 19                     	cmp	edx, 25
       c: 77 03                        	ja	0x11 <tolower+0x11>
       e: 83 c0 20                     	add	eax, 32
      11: 5d                           	pop	ebp
      12: c3                           	ret

Disassembly of section .text.isalpha:

00000000 <isalpha>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 83 e0 df                     	and	eax, -33
       a: 83 e8 41                     	sub	eax, 65
       d: 83 f8 19                     	cmp	eax, 25
      10: 0f 96 c0                     	setbe	al
      13: 0f b6 c0                     	movzx	eax, al
      16: c3                           	ret

Disassembly of section .text.isalnum:

00000000 <isalnum>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 14                     	sub	esp, 20
       6: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       9: 52                           	push	edx
       a: e8 fc ff ff ff               	call	0xb <isalnum+0xb>
			0000000b:  R_386_PC32	isalpha
       f: 83 c4 10                     	add	esp, 16
      12: 89 c1                        	mov	ecx, eax
      14: b8 01 00 00 00               	mov	eax, 1
      19: 85 c9                        	test	ecx, ecx
      1b: 75 0b                        	jne	0x28 <isalnum+0x28>
      1d: 83 ea 30                     	sub	edx, 48
      20: 31 c0                        	xor	eax, eax
      22: 83 fa 09                     	cmp	edx, 9
      25: 0f 96 c0                     	setbe	al
      28: c9                           	leave
      29: c3                           	ret

Disassembly of section .text.iscntrl:

00000000 <iscntrl>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 83 fa 1f                     	cmp	edx, 31
       a: 0f 9e c0                     	setle	al
       d: 83 fa 7f                     	cmp	edx, 127
      10: 0f 94 c2                     	sete	dl
      13: 09 d0                        	or	eax, edx
      15: 0f b6 c0                     	movzx	eax, al
      18: c3                           	ret

Disassembly of section .text.isblank:

00000000 <isblank>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 83 fa 09                     	cmp	edx, 9
       a: 0f 94 c0                     	sete	al
       d: 83 fa 20                     	cmp	edx, 32
      10: 0f 94 c2                     	sete	dl
      13: 09 d0                        	or	eax, edx
      15: 0f b6 c0                     	movzx	eax, al
      18: c3                           	ret

Disassembly of section .text.isdigit:

00000000 <isdigit>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 83 e8 30                     	sub	eax, 48
       a: 83 f8 09                     	cmp	eax, 9
       d: 0f 96 c0                     	setbe	al
      10: 0f b6 c0                     	movzx	eax, al
      13: c3                           	ret

Disassembly of section .text.islower:

00000000 <islower>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 83 e8 61                     	sub	eax, 97
       a: 83 f8 19                     	cmp	eax, 25
       d: 0f 96 c0                     	setbe	al
      10: 0f b6 c0                     	movzx	eax, al
      13: c3                           	ret

Disassembly of section .text.isprint:

00000000 <isprint>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 83 fa 1f                     	cmp	edx, 31
       a: 0f 9e c0                     	setle	al
       d: 83 fa 7f                     	cmp	edx, 127
      10: 0f 94 c2                     	sete	dl
      13: 09 d0                        	or	eax, edx
      15: 83 f0 01                     	xor	eax, 1
      18: 0f b6 c0                     	movzx	eax, al
      1b: c3                           	ret

Disassembly of section .text.isgraph:

00000000 <isgraph>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 14                     	sub	esp, 20
       6: 8b 4d 08                     	mov	ecx, dword ptr [ebp + 8]
       9: 51                           	push	ecx
       a: e8 fc ff ff ff               	call	0xb <isgraph+0xb>
			0000000b:  R_386_PC32	isprint
       f: 83 c4 10                     	add	esp, 16
      12: 83 f9 20                     	cmp	ecx, 32
      15: c9                           	leave
      16: 0f 95 c2                     	setne	dl
      19: 85 c0                        	test	eax, eax
      1b: 0f 95 c0                     	setne	al
      1e: 0f b6 c0                     	movzx	eax, al
      21: 21 d0                        	and	eax, edx
      23: c3                           	ret

Disassembly of section .text.isspace:

00000000 <isspace>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 8d 42 f7                     	lea	eax, [edx - 9]
       a: 83 f8 04                     	cmp	eax, 4
       d: 0f 96 c0                     	setbe	al
      10: 83 fa 20                     	cmp	edx, 32
      13: 0f 94 c2                     	sete	dl
      16: 09 d0                        	or	eax, edx
      18: 0f b6 c0                     	movzx	eax, al
      1b: c3                           	ret

Disassembly of section .text.ispunct:

00000000 <ispunct>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 14                     	sub	esp, 20
       6: 8b 4d 08                     	mov	ecx, dword ptr [ebp + 8]
       9: 51                           	push	ecx
       a: e8 fc ff ff ff               	call	0xb <ispunct+0xb>
			0000000b:  R_386_PC32	isprint
       f: 83 c4 10                     	add	esp, 16
      12: 85 c0                        	test	eax, eax
      14: 74 28                        	je	0x3e <ispunct+0x3e>
      16: 83 ec 0c                     	sub	esp, 12
      19: 51                           	push	ecx
      1a: e8 fc ff ff ff               	call	0x1b <ispunct+0x1b>
			0000001b:  R_386_PC32	isspace
      1f: 83 c4 10                     	add	esp, 16
      22: 89 c2                        	mov	edx, eax
      24: 31 c0                        	xor	eax, eax
      26: 85 d2                        	test	edx, edx
      28: 75 14                        	jne	0x3e <ispunct+0x3e>
      2a: 83 ec 0c                     	sub	esp, 12
      2d: 51                           	push	ecx
      2e: e8 fc ff ff ff               	call	0x2f <ispunct+0x2f>
			0000002f:  R_386_PC32	isalnum
      33: 83 c4 10                     	add	esp, 16
      36: 85 c0                        	test	eax, eax
      38: 0f 94 c0                     	sete	al
      3b: 0f b6 c0                     	movzx	eax, al
      3e: c9                           	leave
      3f: c3                           	ret

Disassembly of section .text.isupper:

00000000 <isupper>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 83 e8 41                     	sub	eax, 65
       a: 83 f8 19                     	cmp	eax, 25
       d: 0f 96 c0                     	setbe	al
      10: 0f b6 c0                     	movzx	eax, al
      13: c3                           	ret

Disassembly of section .text.isxdigit:

00000000 <isxdigit>:
       0: 55                           	push	ebp
       1: ba 01 00 00 00               	mov	edx, 1
       6: 89 e5                        	mov	ebp, esp
       8: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       b: 8d 48 d0                     	lea	ecx, [eax - 48]
       e: 83 f9 09                     	cmp	ecx, 9
      11: 76 0e                        	jbe	0x21 <isxdigit+0x21>
      13: 83 e0 df                     	and	eax, -33
      16: 31 d2                        	xor	edx, edx
      18: 83 e8 41                     	sub	eax, 65
      1b: 83 f8 05                     	cmp	eax, 5
      1e: 0f 96 c2                     	setbe	dl
      21: 89 d0                        	mov	eax, edx
      23: 5d                           	pop	ebp
      24: c3                           	ret

libc/x86/libc.a(string.o):	file format elf32-i386

Disassembly of section .text.memchr:

00000000 <memchr>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 8b 55 10                     	mov	edx, dword ptr [ebp + 16]
       9: 8b 4d 0c                     	mov	ecx, dword ptr [ebp + 12]
       c: 01 c2                        	add	edx, eax
       e: 39 d0                        	cmp	eax, edx
      10: 74 07                        	je	0x19 <memchr+0x19>
      12: 38 08                        	cmp	byte ptr [eax], cl
      14: 74 05                        	je	0x1b <memchr+0x1b>
      16: 40                           	inc	eax
      17: eb f5                        	jmp	0xe <memchr+0xe>
      19: 31 c0                        	xor	eax, eax
      1b: 5d                           	pop	ebp
      1c: c3                           	ret

Disassembly of section .text.memcmp:

00000000 <memcmp>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       7: 8b 75 10                     	mov	esi, dword ptr [ebp + 16]
       a: 53                           	push	ebx
       b: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
       e: 01 c6                        	add	esi, eax
      10: 39 f0                        	cmp	eax, esi
      12: 74 15                        	je	0x29 <memcmp+0x29>
      14: 8a 08                        	mov	cl, byte ptr [eax]
      16: 8a 1a                        	mov	bl, byte ptr [edx]
      18: 38 d9                        	cmp	cl, bl
      1a: 72 11                        	jb	0x2d <memcmp+0x2d>
      1c: 40                           	inc	eax
      1d: 42                           	inc	edx
      1e: 38 cb                        	cmp	bl, cl
      20: 73 ee                        	jae	0x10 <memcmp+0x10>
      22: b8 01 00 00 00               	mov	eax, 1
      27: eb 07                        	jmp	0x30 <memcmp+0x30>
      29: 31 c0                        	xor	eax, eax
      2b: eb 03                        	jmp	0x30 <memcmp+0x30>
      2d: 83 c8 ff                     	or	eax, -1
      30: 5b                           	pop	ebx
      31: 5e                           	pop	esi
      32: 5d                           	pop	ebp
      33: c3                           	ret

Disassembly of section .text.strncmp:

00000000 <strncmp>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       7: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
       a: 8b 4d 10                     	mov	ecx, dword ptr [ebp + 16]
       d: 85 c9                        	test	ecx, ecx
       f: 74 0f                        	je	0x20 <strncmp+0x20>
      11: 8a 18                        	mov	bl, byte ptr [eax]
      13: 84 db                        	test	bl, bl
      15: 74 0d                        	je	0x24 <strncmp+0x24>
      17: 3a 1a                        	cmp	bl, byte ptr [edx]
      19: 75 09                        	jne	0x24 <strncmp+0x24>
      1b: 40                           	inc	eax
      1c: 42                           	inc	edx
      1d: 49                           	dec	ecx
      1e: eb ed                        	jmp	0xd <strncmp+0xd>
      20: 31 c0                        	xor	eax, eax
      22: eb 08                        	jmp	0x2c <strncmp+0x2c>
      24: 0f b6 00                     	movzx	eax, byte ptr [eax]
      27: 0f b6 12                     	movzx	edx, byte ptr [edx]
      2a: 29 d0                        	sub	eax, edx
      2c: 5b                           	pop	ebx
      2d: 5d                           	pop	ebp
      2e: c3                           	ret

Disassembly of section .text.memset:

00000000 <memset>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 8a 45 0c                     	mov	al, byte ptr [ebp + 12]
       7: 8b 4d 10                     	mov	ecx, dword ptr [ebp + 16]
       a: 8b 7d 08                     	mov	edi, dword ptr [ebp + 8]
       d: f3 aa                        	rep		stosb	byte ptr es:[edi], al
       f: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      12: 5f                           	pop	edi
      13: 5d                           	pop	ebp
      14: c3                           	ret

Disassembly of section .text.memcpy:

00000000 <memcpy>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       7: 8b 4d 10                     	mov	ecx, dword ptr [ebp + 16]
       a: 56                           	push	esi
       b: 8b 75 0c                     	mov	esi, dword ptr [ebp + 12]
       e: 89 c7                        	mov	edi, eax
      10: f3 a4                        	rep		movsb	byte ptr es:[edi], byte ptr [esi]
      12: 5e                           	pop	esi
      13: 5f                           	pop	edi
      14: 5d                           	pop	ebp
      15: c3                           	ret

Disassembly of section .text.memmove:

00000000 <memmove>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       7: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
       a: 56                           	push	esi
       b: 8b 75 0c                     	mov	esi, dword ptr [ebp + 12]
       e: 39 d6                        	cmp	esi, edx
      10: 72 0b                        	jb	0x1d <memmove+0x1d>
      12: 01 d0                        	add	eax, edx
      14: 89 d7                        	mov	edi, edx
      16: 39 c7                        	cmp	edi, eax
      18: 74 10                        	je	0x2a <memmove+0x2a>
      1a: a4                           	movsb	byte ptr es:[edi], byte ptr [esi]
      1b: eb f9                        	jmp	0x16 <memmove+0x16>
      1d: 83 e8 01                     	sub	eax, 1
      20: 72 08                        	jb	0x2a <memmove+0x2a>
      22: 8a 0c 06                     	mov	cl, byte ptr [esi + eax]
      25: 88 0c 02                     	mov	byte ptr [edx + eax], cl
      28: eb f3                        	jmp	0x1d <memmove+0x1d>
      2a: 5e                           	pop	esi
      2b: 89 d0                        	mov	eax, edx
      2d: 5f                           	pop	edi
      2e: 5d                           	pop	ebp
      2f: c3                           	ret

Disassembly of section .text.strcat:

00000000 <strcat>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       7: 89 c2                        	mov	edx, eax
       9: 8a 0a                        	mov	cl, byte ptr [edx]
       b: 89 d3                        	mov	ebx, edx
       d: 8d 52 01                     	lea	edx, [edx + 1]
      10: 84 c9                        	test	cl, cl
      12: 75 f5                        	jne	0x9 <strcat+0x9>
      14: 31 d2                        	xor	edx, edx
      16: 8b 4d 0c                     	mov	ecx, dword ptr [ebp + 12]
      19: 8a 0c 11                     	mov	cl, byte ptr [ecx + edx]
      1c: 88 0c 13                     	mov	byte ptr [ebx + edx], cl
      1f: 42                           	inc	edx
      20: 84 c9                        	test	cl, cl
      22: 75 f2                        	jne	0x16 <strcat+0x16>
      24: 5b                           	pop	ebx
      25: 5d                           	pop	ebp
      26: c3                           	ret

Disassembly of section .text.strcmp:

00000000 <strcmp>:
       0: 55                           	push	ebp
       1: 31 c9                        	xor	ecx, ecx
       3: 89 e5                        	mov	ebp, esp
       5: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       8: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
       b: 0f b6 04 08                  	movzx	eax, byte ptr [eax + ecx]
       f: 0f b6 14 0a                  	movzx	edx, byte ptr [edx + ecx]
      13: 84 c0                        	test	al, al
      15: 74 05                        	je	0x1c <strcmp+0x1c>
      17: 41                           	inc	ecx
      18: 38 d0                        	cmp	al, dl
      1a: 74 e9                        	je	0x5 <strcmp+0x5>
      1c: 29 d0                        	sub	eax, edx
      1e: 5d                           	pop	ebp
      1f: c3                           	ret

Disassembly of section .text.strcpy:

00000000 <strcpy>:
       0: 55                           	push	ebp
       1: 31 c0                        	xor	eax, eax
       3: 89 e5                        	mov	ebp, esp
       5: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       8: 8b 4d 0c                     	mov	ecx, dword ptr [ebp + 12]
       b: 8a 0c 01                     	mov	cl, byte ptr [ecx + eax]
       e: 88 0c 02                     	mov	byte ptr [edx + eax], cl
      11: 40                           	inc	eax
      12: 84 c9                        	test	cl, cl
      14: 75 f2                        	jne	0x8 <strcpy+0x8>
      16: 89 d0                        	mov	eax, edx
      18: 5d                           	pop	ebp
      19: c3                           	ret

Disassembly of section .text.strlen:

00000000 <strlen>:
       0: 55                           	push	ebp
       1: 31 c0                        	xor	eax, eax
       3: 89 e5                        	mov	ebp, esp
       5: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       8: 80 3c 02 00                  	cmp	byte ptr [edx + eax], 0
       c: 74 03                        	je	0x11 <strlen+0x11>
       e: 40                           	inc	eax
       f: eb f7                        	jmp	0x8 <strlen+0x8>
      11: 5d                           	pop	ebp
      12: c3                           	ret

Disassembly of section .text.strncpy:

00000000 <strncpy>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       7: 8b 75 10                     	mov	esi, dword ptr [ebp + 16]
       a: 53                           	push	ebx
       b: 8b 4d 0c                     	mov	ecx, dword ptr [ebp + 12]
       e: 01 d6                        	add	esi, edx
      10: 89 d0                        	mov	eax, edx
      12: 39 f0                        	cmp	eax, esi
      14: 74 0e                        	je	0x24 <strncpy+0x24>
      16: 8a 19                        	mov	bl, byte ptr [ecx]
      18: 40                           	inc	eax
      19: 80 fb 01                     	cmp	bl, 1
      1c: 88 58 ff                     	mov	byte ptr [eax - 1], bl
      1f: 83 d9 ff                     	sbb	ecx, -1
      22: eb ee                        	jmp	0x12 <strncpy+0x12>
      24: 5b                           	pop	ebx
      25: 89 d0                        	mov	eax, edx
      27: 5e                           	pop	esi
      28: 5d                           	pop	ebp
      29: c3                           	ret

Disassembly of section .text.strchr:

00000000 <strchr>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 8a 10                        	mov	dl, byte ptr [eax]
       8: 3a 55 0c                     	cmp	dl, byte ptr [ebp + 12]
       b: 74 07                        	je	0x14 <strchr+0x14>
       d: 40                           	inc	eax
       e: 84 d2                        	test	dl, dl
      10: 75 f4                        	jne	0x6 <strchr+0x6>
      12: 31 c0                        	xor	eax, eax
      14: 5d                           	pop	ebp
      15: c3                           	ret

Disassembly of section .text.strdup:

00000000 <strdup>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8b 75 08                     	mov	esi, dword ptr [ebp + 8]
       8: 83 ec 0c                     	sub	esp, 12
       b: 56                           	push	esi
       c: e8 fc ff ff ff               	call	0xd <strdup+0xd>
			0000000d:  R_386_PC32	strlen
      11: 40                           	inc	eax
      12: 89 04 24                     	mov	dword ptr [esp], eax
      15: e8 fc ff ff ff               	call	0x16 <strdup+0x16>
			00000016:  R_386_PC32	malloc
      1a: 89 c3                        	mov	ebx, eax
      1c: 58                           	pop	eax
      1d: 5a                           	pop	edx
      1e: 56                           	push	esi
      1f: 53                           	push	ebx
      20: e8 fc ff ff ff               	call	0x21 <strdup+0x21>
			00000021:  R_386_PC32	strcpy
      25: 8d 65 f8                     	lea	esp, [ebp - 8]
      28: 89 d8                        	mov	eax, ebx
      2a: 5b                           	pop	ebx
      2b: 5e                           	pop	esi
      2c: 5d                           	pop	ebp
      2d: c3                           	ret

Disassembly of section .text.strerror:

00000000 <strerror>:
       0: 55                           	push	ebp
       1: b8 00 00 00 00               	mov	eax, 0
			00000002:  R_386_32	.rodata.strerror.str1.1
       6: 89 e5                        	mov	ebp, esp
       8: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       b: 83 fa 22                     	cmp	edx, 34
       e: 77 07                        	ja	0x17 <strerror+0x17>
      10: 8b 04 95 00 00 00 00         	mov	eax, dword ptr [4*edx]
			00000013:  R_386_32	.rodata.CSWTCH.61
      17: 5d                           	pop	ebp
      18: c3                           	ret

Disassembly of section .text.strncat:

00000000 <strncat>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       7: 8b 4d 0c                     	mov	ecx, dword ptr [ebp + 12]
       a: 53                           	push	ebx
       b: 89 c2                        	mov	edx, eax
       d: 80 3a 00                     	cmp	byte ptr [edx], 0
      10: 74 03                        	je	0x15 <strncat+0x15>
      12: 42                           	inc	edx
      13: eb f8                        	jmp	0xd <strncat+0xd>
      15: 8b 75 10                     	mov	esi, dword ptr [ebp + 16]
      18: 01 d6                        	add	esi, edx
      1a: 8a 19                        	mov	bl, byte ptr [ecx]
      1c: 84 db                        	test	bl, bl
      1e: 74 0b                        	je	0x2b <strncat+0x2b>
      20: 39 f2                        	cmp	edx, esi
      22: 74 07                        	je	0x2b <strncat+0x2b>
      24: 42                           	inc	edx
      25: 41                           	inc	ecx
      26: 88 5a ff                     	mov	byte ptr [edx - 1], bl
      29: eb ef                        	jmp	0x1a <strncat+0x1a>
      2b: c6 02 00                     	mov	byte ptr [edx], 0
      2e: 5b                           	pop	ebx
      2f: 5e                           	pop	esi
      30: 5d                           	pop	ebp
      31: c3                           	ret

Disassembly of section .text.strxfrm:

00000000 <strxfrm>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 8b 5d 10                     	mov	ebx, dword ptr [ebp + 16]
       7: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       a: 8b 4d 0c                     	mov	ecx, dword ptr [ebp + 12]
       d: 85 db                        	test	ebx, ebx
       f: 74 07                        	je	0x18 <strxfrm+0x18>
      11: 8d 51 01                     	lea	edx, [ecx + 1]
      14: 01 d9                        	add	ecx, ebx
      16: eb 14                        	jmp	0x2c <strxfrm+0x2c>
      18: 85 c0                        	test	eax, eax
      1a: 74 21                        	je	0x3d <strxfrm+0x3d>
      1c: c6 00 00                     	mov	byte ptr [eax], 0
      1f: eb 1c                        	jmp	0x3d <strxfrm+0x3d>
      21: 8a 5a ff                     	mov	bl, byte ptr [edx - 1]
      24: 42                           	inc	edx
      25: 84 db                        	test	bl, bl
      27: 74 07                        	je	0x30 <strxfrm+0x30>
      29: 88 18                        	mov	byte ptr [eax], bl
      2b: 40                           	inc	eax
      2c: 39 d1                        	cmp	ecx, edx
      2e: 75 f1                        	jne	0x21 <strxfrm+0x21>
      30: c6 00 00                     	mov	byte ptr [eax], 0
      33: 5b                           	pop	ebx
      34: 89 45 08                     	mov	dword ptr [ebp + 8], eax
      37: 5d                           	pop	ebp
      38: e9 fc ff ff ff               	jmp	0x39 <strxfrm+0x39>
			00000039:  R_386_PC32	strlen
      3d: 31 c0                        	xor	eax, eax
      3f: 5b                           	pop	ebx
      40: 5d                           	pop	ebp
      41: c3                           	ret

Disassembly of section .text.strcoll:

00000000 <strcoll>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8d 5d f6                     	lea	ebx, [ebp - 10]
       8: 8d 75 f7                     	lea	esi, [ebp - 9]
       b: 83 ec 14                     	sub	esp, 20
       e: 6a 01                        	push	1
      10: ff 75 08                     	push	dword ptr [ebp + 8]
      13: 53                           	push	ebx
      14: e8 fc ff ff ff               	call	0x15 <strcoll+0x15>
			00000015:  R_386_PC32	strxfrm
      19: 83 c4 0c                     	add	esp, 12
      1c: 6a 01                        	push	1
      1e: ff 75 0c                     	push	dword ptr [ebp + 12]
      21: 56                           	push	esi
      22: e8 fc ff ff ff               	call	0x23 <strcoll+0x23>
			00000023:  R_386_PC32	strxfrm
      27: 58                           	pop	eax
      28: 5a                           	pop	edx
      29: 56                           	push	esi
      2a: 53                           	push	ebx
      2b: e8 fc ff ff ff               	call	0x2c <strcoll+0x2c>
			0000002c:  R_386_PC32	strcmp
      30: 83 c4 10                     	add	esp, 16
      33: 8d 65 f8                     	lea	esp, [ebp - 8]
      36: 5b                           	pop	ebx
      37: 5e                           	pop	esi
      38: 5d                           	pop	ebp
      39: c3                           	ret

Disassembly of section .text.strspn:

00000000 <strspn>:
       0: 55                           	push	ebp
       1: 31 c0                        	xor	eax, eax
       3: 89 e5                        	mov	ebp, esp
       5: 53                           	push	ebx
       6: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       9: 8a 0c 02                     	mov	cl, byte ptr [edx + eax]
       c: 84 c9                        	test	cl, cl
       e: 74 11                        	je	0x21 <strspn+0x21>
      10: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
      13: 8a 1a                        	mov	bl, byte ptr [edx]
      15: 84 db                        	test	bl, bl
      17: 74 08                        	je	0x21 <strspn+0x21>
      19: 42                           	inc	edx
      1a: 38 cb                        	cmp	bl, cl
      1c: 75 f5                        	jne	0x13 <strspn+0x13>
      1e: 40                           	inc	eax
      1f: eb e5                        	jmp	0x6 <strspn+0x6>
      21: 5b                           	pop	ebx
      22: 5d                           	pop	ebp
      23: c3                           	ret

Disassembly of section .text.strcspn:

00000000 <strcspn>:
       0: 55                           	push	ebp
       1: 31 c0                        	xor	eax, eax
       3: 89 e5                        	mov	ebp, esp
       5: 53                           	push	ebx
       6: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       9: 8a 0c 02                     	mov	cl, byte ptr [edx + eax]
       c: 84 c9                        	test	cl, cl
       e: 74 13                        	je	0x23 <strcspn+0x23>
      10: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
      13: 8a 1a                        	mov	bl, byte ptr [edx]
      15: 84 db                        	test	bl, bl
      17: 74 07                        	je	0x20 <strcspn+0x20>
      19: 42                           	inc	edx
      1a: 38 cb                        	cmp	bl, cl
      1c: 75 f5                        	jne	0x13 <strcspn+0x13>
      1e: eb 03                        	jmp	0x23 <strcspn+0x23>
      20: 40                           	inc	eax
      21: eb e3                        	jmp	0x6 <strcspn+0x6>
      23: 5b                           	pop	ebx
      24: 5d                           	pop	ebp
      25: c3                           	ret

Disassembly of section .text.strpbrk:

00000000 <strpbrk>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       7: 8a 08                        	mov	cl, byte ptr [eax]
       9: 84 c9                        	test	cl, cl
       b: 74 13                        	je	0x20 <strpbrk+0x20>
       d: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
      10: 8a 1a                        	mov	bl, byte ptr [edx]
      12: 84 db                        	test	bl, bl
      14: 74 07                        	je	0x1d <strpbrk+0x1d>
      16: 42                           	inc	edx
      17: 38 cb                        	cmp	bl, cl
      19: 75 f5                        	jne	0x10 <strpbrk+0x10>
      1b: eb 05                        	jmp	0x22 <strpbrk+0x22>
      1d: 40                           	inc	eax
      1e: eb e7                        	jmp	0x7 <strpbrk+0x7>
      20: 31 c0                        	xor	eax, eax
      22: 5b                           	pop	ebx
      23: 5d                           	pop	ebp
      24: c3                           	ret

Disassembly of section .text.strrchr:

00000000 <strrchr>:
       0: 55                           	push	ebp
       1: 31 d2                        	xor	edx, edx
       3: 89 e5                        	mov	ebp, esp
       5: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       8: 8a 08                        	mov	cl, byte ptr [eax]
       a: 84 c9                        	test	cl, cl
       c: 74 09                        	je	0x17 <strrchr+0x17>
       e: 3a 4d 0c                     	cmp	cl, byte ptr [ebp + 12]
      11: 0f 44 d0                     	cmove	edx, eax
      14: 40                           	inc	eax
      15: eb f1                        	jmp	0x8 <strrchr+0x8>
      17: 89 d0                        	mov	eax, edx
      19: 5d                           	pop	ebp
      1a: c3                           	ret

Disassembly of section .text.strstr:

00000000 <strstr>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 83 ec 18                     	sub	esp, 24
       9: 8b 7d 0c                     	mov	edi, dword ptr [ebp + 12]
       c: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       f: 57                           	push	edi
      10: e8 fc ff ff ff               	call	0x11 <strstr+0x11>
			00000011:  R_386_PC32	strlen
      15: 83 c4 10                     	add	esp, 16
      18: 89 c6                        	mov	esi, eax
      1a: 85 c0                        	test	eax, eax
      1c: 74 1a                        	je	0x38 <strstr+0x38>
      1e: 80 3b 00                     	cmp	byte ptr [ebx], 0
      21: 74 13                        	je	0x36 <strstr+0x36>
      23: 50                           	push	eax
      24: 56                           	push	esi
      25: 57                           	push	edi
      26: 53                           	push	ebx
      27: e8 fc ff ff ff               	call	0x28 <strstr+0x28>
			00000028:  R_386_PC32	memcmp
      2c: 83 c4 10                     	add	esp, 16
      2f: 85 c0                        	test	eax, eax
      31: 74 05                        	je	0x38 <strstr+0x38>
      33: 43                           	inc	ebx
      34: eb e8                        	jmp	0x1e <strstr+0x1e>
      36: 31 db                        	xor	ebx, ebx
      38: 8d 65 f4                     	lea	esp, [ebp - 12]
      3b: 89 d8                        	mov	eax, ebx
      3d: 5b                           	pop	ebx
      3e: 5e                           	pop	esi
      3f: 5f                           	pop	edi
      40: 5d                           	pop	ebp
      41: c3                           	ret

Disassembly of section .text.strtok:

00000000 <strtok>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       7: 56                           	push	esi
       8: 53                           	push	ebx
       9: 85 c0                        	test	eax, eax
       b: 74 07                        	je	0x14 <strtok+0x14>
       d: a3 00 00 00 00               	mov	dword ptr [0], eax
			0000000e:  R_386_32	.bss.saved_pointer.0
      12: eb 09                        	jmp	0x1d <strtok+0x1d>
      14: 83 3d 00 00 00 00 00         	cmp	dword ptr [0], 0
			00000016:  R_386_32	.bss.saved_pointer.0
      1b: 74 2c                        	je	0x49 <strtok+0x49>
      1d: 8b 15 00 00 00 00            	mov	edx, dword ptr [0]
			0000001f:  R_386_32	.bss.saved_pointer.0
      23: 31 f6                        	xor	esi, esi
      25: 89 d0                        	mov	eax, edx
      27: eb 08                        	jmp	0x31 <strtok+0x31>
      29: 46                           	inc	esi
      2a: 38 cb                        	cmp	bl, cl
      2c: 75 0e                        	jne	0x3c <strtok+0x3c>
      2e: 40                           	inc	eax
      2f: 89 fe                        	mov	esi, edi
      31: 8a 08                        	mov	cl, byte ptr [eax]
      33: 89 c7                        	mov	edi, eax
      35: 84 c9                        	test	cl, cl
      37: 74 14                        	je	0x4d <strtok+0x4d>
      39: 8b 75 0c                     	mov	esi, dword ptr [ebp + 12]
      3c: 8a 1e                        	mov	bl, byte ptr [esi]
      3e: 84 db                        	test	bl, bl
      40: 75 e7                        	jne	0x29 <strtok+0x29>
      42: 31 c0                        	xor	eax, eax
      44: a3 00 00 00 00               	mov	dword ptr [0], eax
			00000045:  R_386_32	.bss.saved_pointer.0
      49: 31 f6                        	xor	esi, esi
      4b: eb 2b                        	jmp	0x78 <strtok+0x78>
      4d: 31 c0                        	xor	eax, eax
      4f: 8a 0c 02                     	mov	cl, byte ptr [edx + eax]
      52: 84 c9                        	test	cl, cl
      54: 74 1b                        	je	0x71 <strtok+0x71>
      56: 8b 7d 0c                     	mov	edi, dword ptr [ebp + 12]
      59: 8a 1f                        	mov	bl, byte ptr [edi]
      5b: 84 db                        	test	bl, bl
      5d: 74 0f                        	je	0x6e <strtok+0x6e>
      5f: 47                           	inc	edi
      60: 38 cb                        	cmp	bl, cl
      62: 75 f5                        	jne	0x59 <strtok+0x59>
      64: c6 04 02 00                  	mov	byte ptr [edx + eax], 0
      68: 8d 44 02 01                  	lea	eax, [edx + eax + 1]
      6c: eb 05                        	jmp	0x73 <strtok+0x73>
      6e: 40                           	inc	eax
      6f: eb de                        	jmp	0x4f <strtok+0x4f>
      71: 31 c0                        	xor	eax, eax
      73: a3 00 00 00 00               	mov	dword ptr [0], eax
			00000074:  R_386_32	.bss.saved_pointer.0
      78: 5b                           	pop	ebx
      79: 89 f0                        	mov	eax, esi
      7b: 5e                           	pop	esi
      7c: 5f                           	pop	edi
      7d: 5d                           	pop	ebp
      7e: c3                           	ret

libc/x86/libc.a(rand.o):	file format elf32-i386

Disassembly of section .text.rand:

00000000 <rand>:
       0: 69 05 00 00 00 00 d6 c9 48 02	imul	eax, dword ptr [0], 38324694
			00000002:  R_386_32	.data.rand_seed
       a: 69 0d 04 00 00 00 a5 2b 35 8b	imul	ecx, dword ptr [4], 2335517605
			0000000c:  R_386_32	.data.rand_seed
      14: 01 c1                        	add	ecx, eax
      16: b8 a5 2b 35 8b               	mov	eax, 2335517605
      1b: f7 25 00 00 00 00            	mul	dword ptr [0]
			0000001d:  R_386_32	.data.rand_seed
      21: 01 ca                        	add	edx, ecx
      23: 05 7d 12 fd 98               	add	eax, 2566722173
      28: 81 d2 48 6e 8b cc            	adc	edx, 3431689800
      2e: a3 00 00 00 00               	mov	dword ptr [0], eax
			0000002f:  R_386_32	.data.rand_seed
      33: 89 d0                        	mov	eax, edx
      35: 89 15 04 00 00 00            	mov	dword ptr [4], edx
			00000037:  R_386_32	.data.rand_seed
      3b: d1 e8                        	shr	eax
      3d: c3                           	ret

Disassembly of section .text.srand:

00000000 <srand>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: a3 00 00 00 00               	mov	dword ptr [0], eax
			00000008:  R_386_32	.data.rand_seed
       c: 31 c0                        	xor	eax, eax
       e: a3 04 00 00 00               	mov	dword ptr [4], eax
			0000000f:  R_386_32	.data.rand_seed
      13: c3                           	ret

libc/x86/libc.a(abs.o):	file format elf32-i386

Disassembly of section .text.abs:

00000000 <abs>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 89 d0                        	mov	eax, edx
       9: f7 d8                        	neg	eax
       b: 0f 48 c2                     	cmovs	eax, edx
       e: c3                           	ret

Disassembly of section .text.labs:

00000000 <labs>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       6: 5d                           	pop	ebp
       7: 89 d0                        	mov	eax, edx
       9: f7 d8                        	neg	eax
       b: 0f 48 c2                     	cmovs	eax, edx
       e: c3                           	ret

Disassembly of section .text.llabs:

00000000 <llabs>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 4d 08                     	mov	ecx, dword ptr [ebp + 8]
       6: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
       9: 89 c8                        	mov	eax, ecx
       b: f7 d8                        	neg	eax
       d: 83 d2 00                     	adc	edx, 0
      10: f7 da                        	neg	edx
      12: 0f 48 55 0c                  	cmovs	edx, dword ptr [ebp + 12]
      16: 5d                           	pop	ebp
      17: 0f 48 c1                     	cmovs	eax, ecx
      1a: c3                           	ret

libc/x86/libc.a(div.o):	file format elf32-i386

Disassembly of section .text.div:

00000000 <div>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
       6: 8b 4d 08                     	mov	ecx, dword ptr [ebp + 8]
       9: 99                           	cdq
       a: f7 7d 10                     	idiv	dword ptr [ebp + 16]
       d: 89 01                        	mov	dword ptr [ecx], eax
       f: 89 c8                        	mov	eax, ecx
      11: 89 51 04                     	mov	dword ptr [ecx + 4], edx
      14: 5d                           	pop	ebp
      15: c2 04 00                     	ret	4

Disassembly of section .text.ldiv:

00000000 <ldiv>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
       6: 8b 4d 08                     	mov	ecx, dword ptr [ebp + 8]
       9: 99                           	cdq
       a: f7 7d 10                     	idiv	dword ptr [ebp + 16]
       d: 89 01                        	mov	dword ptr [ecx], eax
       f: 89 c8                        	mov	eax, ecx
      11: 89 51 04                     	mov	dword ptr [ecx + 4], edx
      14: 5d                           	pop	ebp
      15: c2 04 00                     	ret	4

Disassembly of section .text.lldiv:

00000000 <lldiv>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 8d 45 f0                     	lea	eax, [ebp - 16]
       7: 83 ec 20                     	sub	esp, 32
       a: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       d: 50                           	push	eax
       e: ff 75 18                     	push	dword ptr [ebp + 24]
      11: ff 75 14                     	push	dword ptr [ebp + 20]
      14: ff 75 10                     	push	dword ptr [ebp + 16]
      17: ff 75 0c                     	push	dword ptr [ebp + 12]
      1a: e8 fc ff ff ff               	call	0x1b <lldiv+0x1b>
			0000001b:  R_386_PC32	__divmoddi4
      1f: 83 c4 20                     	add	esp, 32
      22: 89 03                        	mov	dword ptr [ebx], eax
      24: 89 53 04                     	mov	dword ptr [ebx + 4], edx
      27: 8b 45 f0                     	mov	eax, dword ptr [ebp - 16]
      2a: 8b 55 f4                     	mov	edx, dword ptr [ebp - 12]
      2d: 89 43 08                     	mov	dword ptr [ebx + 8], eax
      30: 89 d8                        	mov	eax, ebx
      32: 89 53 0c                     	mov	dword ptr [ebx + 12], edx
      35: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      38: c9                           	leave
      39: c2 04 00                     	ret	4

libc/x86/libc.a(search_sort.o):	file format elf32-i386

Disassembly of section .text.MergeSort.isra.0:

00000000 <MergeSort.isra.0>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 83 ec 3c                     	sub	esp, 60
       9: 89 45 dc                     	mov	dword ptr [ebp - 36], eax
       c: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
       f: 89 55 e4                     	mov	dword ptr [ebp - 28], edx
      12: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
      15: 89 45 c8                     	mov	dword ptr [ebp - 56], eax
      18: 39 ca                        	cmp	edx, ecx
      1a: 0f 83 ab 01 00 00            	jae	0x1cb <MergeSort.isra.0+0x1cb>
      20: 89 cf                        	mov	edi, ecx
      22: 89 d0                        	mov	eax, edx
      24: 89 ce                        	mov	esi, ecx
      26: 29 d7                        	sub	edi, edx
      28: d1 ef                        	shr	edi
      2a: 01 f8                        	add	eax, edi
      2c: 89 45 e0                     	mov	dword ptr [ebp - 32], eax
      2f: 51                           	push	ecx
      30: 51                           	push	ecx
      31: 89 c1                        	mov	ecx, eax
      33: ff 75 c8                     	push	dword ptr [ebp - 56]
      36: 53                           	push	ebx
      37: 8b 45 dc                     	mov	eax, dword ptr [ebp - 36]
      3a: e8 c1 ff ff ff               	call	0x0 <MergeSort.isra.0>
      3f: 8b 45 e0                     	mov	eax, dword ptr [ebp - 32]
      42: 40                           	inc	eax
      43: 89 45 c4                     	mov	dword ptr [ebp - 60], eax
      46: 5a                           	pop	edx
      47: 89 c2                        	mov	edx, eax
      49: 59                           	pop	ecx
      4a: ff 75 c8                     	push	dword ptr [ebp - 56]
      4d: 89 f1                        	mov	ecx, esi
      4f: 53                           	push	ebx
      50: 8b 45 dc                     	mov	eax, dword ptr [ebp - 36]
      53: e8 a8 ff ff ff               	call	0x0 <MergeSort.isra.0>
      58: 8d 47 01                     	lea	eax, [edi + 1]
      5b: 89 45 d8                     	mov	dword ptr [ebp - 40], eax
      5e: 8b 55 d8                     	mov	edx, dword ptr [ebp - 40]
      61: 8b 45 e0                     	mov	eax, dword ptr [ebp - 32]
      64: 0f af d3                     	imul	edx, ebx
      67: 29 c6                        	sub	esi, eax
      69: 89 75 cc                     	mov	dword ptr [ebp - 52], esi
      6c: 89 f7                        	mov	edi, esi
      6e: 89 14 24                     	mov	dword ptr [esp], edx
      71: 0f af fb                     	imul	edi, ebx
      74: 89 55 e0                     	mov	dword ptr [ebp - 32], edx
      77: e8 fc ff ff ff               	call	0x78 <MergeSort.isra.0+0x78>
			00000078:  R_386_PC32	malloc
      7c: 89 45 d4                     	mov	dword ptr [ebp - 44], eax
      7f: 89 3c 24                     	mov	dword ptr [esp], edi
      82: e8 fc ff ff ff               	call	0x83 <MergeSort.isra.0+0x83>
			00000083:  R_386_PC32	malloc
      87: 8b 75 e4                     	mov	esi, dword ptr [ebp - 28]
      8a: 8b 55 e0                     	mov	edx, dword ptr [ebp - 32]
      8d: 83 c4 0c                     	add	esp, 12
      90: 89 45 d0                     	mov	dword ptr [ebp - 48], eax
      93: 8b 45 dc                     	mov	eax, dword ptr [ebp - 36]
      96: 0f af f3                     	imul	esi, ebx
      99: 52                           	push	edx
      9a: 01 c6                        	add	esi, eax
      9c: 56                           	push	esi
      9d: ff 75 d4                     	push	dword ptr [ebp - 44]
      a0: e8 fc ff ff ff               	call	0xa1 <MergeSort.isra.0+0xa1>
			000000a1:  R_386_PC32	memcpy
      a5: 83 c4 0c                     	add	esp, 12
      a8: 57                           	push	edi
      a9: 8b 45 c4                     	mov	eax, dword ptr [ebp - 60]
      ac: 31 ff                        	xor	edi, edi
      ae: 8b 4d dc                     	mov	ecx, dword ptr [ebp - 36]
      b1: 0f af c3                     	imul	eax, ebx
      b4: 01 c8                        	add	eax, ecx
      b6: 50                           	push	eax
      b7: ff 75 d0                     	push	dword ptr [ebp - 48]
      ba: e8 fc ff ff ff               	call	0xbb <MergeSort.isra.0+0xbb>
			000000bb:  R_386_PC32	memcpy
      bf: 89 7d e0                     	mov	dword ptr [ebp - 32], edi
      c2: 83 c4 10                     	add	esp, 16
      c5: 31 ff                        	xor	edi, edi
      c7: 8b 45 d8                     	mov	eax, dword ptr [ebp - 40]
      ca: 39 c7                        	cmp	edi, eax
      cc: 73 5b                        	jae	0x129 <MergeSort.isra.0+0x129>
      ce: 8b 4d cc                     	mov	ecx, dword ptr [ebp - 52]
      d1: 39 4d e0                     	cmp	dword ptr [ebp - 32], ecx
      d4: 73 53                        	jae	0x129 <MergeSort.isra.0+0x129>
      d6: 89 d9                        	mov	ecx, ebx
      d8: 8b 55 e0                     	mov	edx, dword ptr [ebp - 32]
      db: 8b 45 d4                     	mov	eax, dword ptr [ebp - 44]
      de: 0f af cf                     	imul	ecx, edi
      e1: 0f af d3                     	imul	edx, ebx
      e4: 01 c1                        	add	ecx, eax
      e6: 8b 45 d0                     	mov	eax, dword ptr [ebp - 48]
      e9: 01 c2                        	add	edx, eax
      eb: 50                           	push	eax
      ec: 50                           	push	eax
      ed: 52                           	push	edx
      ee: 89 55 c0                     	mov	dword ptr [ebp - 64], edx
      f1: 51                           	push	ecx
      f2: 8b 45 c8                     	mov	eax, dword ptr [ebp - 56]
      f5: 89 4d c4                     	mov	dword ptr [ebp - 60], ecx
      f8: ff d0                        	call	eax
      fa: 8b 55 c0                     	mov	edx, dword ptr [ebp - 64]
      fd: 83 c4 10                     	add	esp, 16
     100: 85 c0                        	test	eax, eax
     102: 7f 0f                        	jg	0x113 <MergeSort.isra.0+0x113>
     104: 50                           	push	eax
     105: 47                           	inc	edi
     106: 53                           	push	ebx
     107: 8b 4d c4                     	mov	ecx, dword ptr [ebp - 60]
     10a: 51                           	push	ecx
     10b: 56                           	push	esi
     10c: e8 fc ff ff ff               	call	0x10d <MergeSort.isra.0+0x10d>
			0000010d:  R_386_PC32	memcpy
     111: eb 0c                        	jmp	0x11f <MergeSort.isra.0+0x11f>
     113: 50                           	push	eax
     114: 53                           	push	ebx
     115: 52                           	push	edx
     116: 56                           	push	esi
     117: e8 fc ff ff ff               	call	0x118 <MergeSort.isra.0+0x118>
			00000118:  R_386_PC32	memcpy
     11c: ff 45 e0                     	inc	dword ptr [ebp - 32]
     11f: ff 45 e4                     	inc	dword ptr [ebp - 28]
     122: 83 c4 10                     	add	esp, 16
     125: 01 de                        	add	esi, ebx
     127: eb 9e                        	jmp	0xc7 <MergeSort.isra.0+0xc7>
     129: 8b 75 e4                     	mov	esi, dword ptr [ebp - 28]
     12c: 8b 45 dc                     	mov	eax, dword ptr [ebp - 36]
     12f: 89 da                        	mov	edx, ebx
     131: 89 f9                        	mov	ecx, edi
     133: 0f af d7                     	imul	edx, edi
     136: 0f af f3                     	imul	esi, ebx
     139: 01 c6                        	add	esi, eax
     13b: 8b 45 d4                     	mov	eax, dword ptr [ebp - 44]
     13e: 01 c2                        	add	edx, eax
     140: 8b 45 d8                     	mov	eax, dword ptr [ebp - 40]
     143: 39 c1                        	cmp	ecx, eax
     145: 73 1f                        	jae	0x166 <MergeSort.isra.0+0x166>
     147: 89 4d c4                     	mov	dword ptr [ebp - 60], ecx
     14a: 51                           	push	ecx
     14b: 53                           	push	ebx
     14c: 52                           	push	edx
     14d: 89 55 c8                     	mov	dword ptr [ebp - 56], edx
     150: 56                           	push	esi
     151: 01 de                        	add	esi, ebx
     153: e8 fc ff ff ff               	call	0x154 <MergeSort.isra.0+0x154>
			00000154:  R_386_PC32	memcpy
     158: 8b 4d c4                     	mov	ecx, dword ptr [ebp - 60]
     15b: 8b 55 c8                     	mov	edx, dword ptr [ebp - 56]
     15e: 83 c4 10                     	add	esp, 16
     161: 41                           	inc	ecx
     162: 01 da                        	add	edx, ebx
     164: eb da                        	jmp	0x140 <MergeSort.isra.0+0x140>
     166: 89 c6                        	mov	esi, eax
     168: 29 fe                        	sub	esi, edi
     16a: 39 f8                        	cmp	eax, edi
     16c: b8 00 00 00 00               	mov	eax, 0
     171: 8b 7d e0                     	mov	edi, dword ptr [ebp - 32]
     174: 0f 42 f0                     	cmovb	esi, eax
     177: 8b 45 e4                     	mov	eax, dword ptr [ebp - 28]
     17a: 0f af fb                     	imul	edi, ebx
     17d: 01 c6                        	add	esi, eax
     17f: 8b 45 dc                     	mov	eax, dword ptr [ebp - 36]
     182: 0f af f3                     	imul	esi, ebx
     185: 01 f0                        	add	eax, esi
     187: 89 c6                        	mov	esi, eax
     189: 8b 45 d0                     	mov	eax, dword ptr [ebp - 48]
     18c: 01 c7                        	add	edi, eax
     18e: 8b 4d cc                     	mov	ecx, dword ptr [ebp - 52]
     191: 39 4d e0                     	cmp	dword ptr [ebp - 32], ecx
     194: 73 15                        	jae	0x1ab <MergeSort.isra.0+0x1ab>
     196: 50                           	push	eax
     197: 53                           	push	ebx
     198: 57                           	push	edi
     199: 01 df                        	add	edi, ebx
     19b: 56                           	push	esi
     19c: 01 de                        	add	esi, ebx
     19e: e8 fc ff ff ff               	call	0x19f <MergeSort.isra.0+0x19f>
			0000019f:  R_386_PC32	memcpy
     1a3: ff 45 e0                     	inc	dword ptr [ebp - 32]
     1a6: 83 c4 10                     	add	esp, 16
     1a9: eb e3                        	jmp	0x18e <MergeSort.isra.0+0x18e>
     1ab: 83 ec 0c                     	sub	esp, 12
     1ae: ff 75 d4                     	push	dword ptr [ebp - 44]
     1b1: e8 fc ff ff ff               	call	0x1b2 <MergeSort.isra.0+0x1b2>
			000001b2:  R_386_PC32	free
     1b6: 8b 45 d0                     	mov	eax, dword ptr [ebp - 48]
     1b9: 83 c4 10                     	add	esp, 16
     1bc: 89 45 08                     	mov	dword ptr [ebp + 8], eax
     1bf: 8d 65 f4                     	lea	esp, [ebp - 12]
     1c2: 5b                           	pop	ebx
     1c3: 5e                           	pop	esi
     1c4: 5f                           	pop	edi
     1c5: 5d                           	pop	ebp
     1c6: e9 fc ff ff ff               	jmp	0x1c7 <MergeSort.isra.0+0x1c7>
			000001c7:  R_386_PC32	free
     1cb: 8d 65 f4                     	lea	esp, [ebp - 12]
     1ce: 5b                           	pop	ebx
     1cf: 5e                           	pop	esi
     1d0: 5f                           	pop	edi
     1d1: 5d                           	pop	ebp
     1d2: c3                           	ret

Disassembly of section .text.qsort:

00000000 <qsort>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 14                     	mov	edx, dword ptr [ebp + 20]
       6: 8b 4d 0c                     	mov	ecx, dword ptr [ebp + 12]
       9: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       c: 89 55 0c                     	mov	dword ptr [ebp + 12], edx
       f: 8b 55 10                     	mov	edx, dword ptr [ebp + 16]
      12: 49                           	dec	ecx
      13: 89 55 08                     	mov	dword ptr [ebp + 8], edx
      16: 31 d2                        	xor	edx, edx
      18: 5d                           	pop	ebp
      19: e9 fc ff ff ff               	jmp	0x1a <qsort+0x1a>
			0000001a:  R_386_PC32	.text.MergeSort.isra.0

Disassembly of section .text.bsearch:

00000000 <bsearch>:
       0: 55                           	push	ebp
       1: 31 d2                        	xor	edx, edx
       3: 89 e5                        	mov	ebp, esp
       5: 57                           	push	edi
       6: 56                           	push	esi
       7: 53                           	push	ebx
       8: 83 ec 1c                     	sub	esp, 28
       b: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
       e: 8d 78 ff                     	lea	edi, [eax - 1]
      11: 89 fb                        	mov	ebx, edi
      13: 8b 75 14                     	mov	esi, dword ptr [ebp + 20]
      16: 89 55 e4                     	mov	dword ptr [ebp - 28], edx
      19: 29 d3                        	sub	ebx, edx
      1b: d1 eb                        	shr	ebx
      1d: 01 d3                        	add	ebx, edx
      1f: 0f af f3                     	imul	esi, ebx
      22: 03 75 0c                     	add	esi, dword ptr [ebp + 12]
      25: 50                           	push	eax
      26: 50                           	push	eax
      27: 56                           	push	esi
      28: ff 75 08                     	push	dword ptr [ebp + 8]
      2b: ff 55 18                     	call	dword ptr [ebp + 24]
      2e: 83 c4 10                     	add	esp, 16
      31: 85 c0                        	test	eax, eax
      33: 74 11                        	je	0x46 <bsearch+0x46>
      35: 8d 53 01                     	lea	edx, [ebx + 1]
      38: 79 06                        	jns	0x40 <bsearch+0x40>
      3a: 8b 55 e4                     	mov	edx, dword ptr [ebp - 28]
      3d: 8d 7b ff                     	lea	edi, [ebx - 1]
      40: 39 d7                        	cmp	edi, edx
      42: 73 cd                        	jae	0x11 <bsearch+0x11>
      44: 31 f6                        	xor	esi, esi
      46: 8d 65 f4                     	lea	esp, [ebp - 12]
      49: 89 f0                        	mov	eax, esi
      4b: 5b                           	pop	ebx
      4c: 5e                           	pop	esi
      4d: 5f                           	pop	edi
      4e: 5d                           	pop	ebp
      4f: c3                           	ret

libc/x86/libc.a(setjmp.oo):	file format elf32-i386

Disassembly of section .text:

00000000 <setjmp>:
       0: 8b 44 24 04                  	mov	eax, dword ptr [esp + 4]
       4: 89 18                        	mov	dword ptr [eax], ebx
       6: 89 48 04                     	mov	dword ptr [eax + 4], ecx
       9: 89 70 0c                     	mov	dword ptr [eax + 12], esi
       c: 89 78 10                     	mov	dword ptr [eax + 16], edi
       f: 89 68 14                     	mov	dword ptr [eax + 20], ebp
      12: 9c                           	pushfd
      13: 8f 40 18                     	pop	dword ptr [eax + 24]
      16: 5a                           	pop	edx
      17: 89 50 1c                     	mov	dword ptr [eax + 28], edx
      1a: 89 60 20                     	mov	dword ptr [eax + 32], esp
      1d: 31 c0                        	xor	eax, eax
      1f: ff e2                        	jmp	edx

00000021 <longjmp>:
      21: 8b 54 24 04                  	mov	edx, dword ptr [esp + 4]
      25: 8b 44 24 08                  	mov	eax, dword ptr [esp + 8]
      29: 85 c0                        	test	eax, eax
      2b: 75 01                        	jne	0x2e <longjmp.skip_inc>
      2d: 40                           	inc	eax

0000002e <longjmp.skip_inc>:
      2e: 8b 1a                        	mov	ebx, dword ptr [edx]
      30: 8b 4a 04                     	mov	ecx, dword ptr [edx + 4]
      33: 8b 72 0c                     	mov	esi, dword ptr [edx + 12]
      36: 8b 7a 10                     	mov	edi, dword ptr [edx + 16]
      39: 8b 6a 14                     	mov	ebp, dword ptr [edx + 20]
      3c: ff 72 18                     	push	dword ptr [edx + 24]
      3f: 9d                           	popfd
      40: 8b 62 20                     	mov	esp, dword ptr [edx + 32]
      43: 83 c4 04                     	add	esp, 4
      46: ff 62 1c                     	jmp	dword ptr [edx + 28]

libc/x86/libc.a(malloc.o):	file format elf32-i386

Disassembly of section .text.SetSizeTags:

00000000 <SetSizeTags>:
       0: 8b 08                        	mov	ecx, dword ptr [eax]
       2: 83 e1 03                     	and	ecx, 3
       5: 09 d1                        	or	ecx, edx
       7: 89 08                        	mov	dword ptr [eax], ecx
       9: 89 d1                        	mov	ecx, edx
       b: 83 e1 fc                     	and	ecx, -4
       e: 89 54 08 fc                  	mov	dword ptr [eax + ecx - 4], edx
      12: c3                           	ret

Disassembly of section .text.GetInsertionIndex:

00000000 <GetInsertionIndex>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 89 c3                        	mov	ebx, eax
       6: 51                           	push	ecx
       7: 83 f8 07                     	cmp	eax, 7
       a: 77 2b                        	ja	0x37 <GetInsertionIndex+0x37>
       c: 52                           	push	edx
       d: 52                           	push	edx
       e: 68 00 00 00 00               	push	0
			0000000f:  R_386_32	.rodata.GetInsertionIndex.str1.1
      13: 68 03 00 00 00               	push	3
			00000014:  R_386_32	.rodata.GetInsertionIndex.str1.1
      18: 68 1f 00 00 00               	push	31
			00000019:  R_386_32	.rodata.GetInsertionIndex.str1.1
      1d: 68 28 00 00 00               	push	40
			0000001e:  R_386_32	.rodata.GetInsertionIndex.str1.1
      22: 68 5a 00 00 00               	push	90
			00000023:  R_386_32	.rodata.GetInsertionIndex.str1.1
      27: ff 35 00 00 00 00            	push	dword ptr [0]
			00000029:  R_386_32	stderr
      2d: e8 fc ff ff ff               	call	0x2e <GetInsertionIndex+0x2e>
			0000002e:  R_386_PC32	fprintf
      32: 83 c4 20                     	add	esp, 32
      35: eb 05                        	jmp	0x3c <GetInsertionIndex+0x3c>
      37: 83 f8 08                     	cmp	eax, 8
      3a: 74 3d                        	je	0x79 <GetInsertionIndex+0x79>
      3c: 31 c0                        	xor	eax, eax
      3e: 39 1c 85 00 00 00 00         	cmp	dword ptr [4*eax], ebx
			00000041:  R_386_32	.rodata.free_list_block_sizes
      45: 72 03                        	jb	0x4a <GetInsertionIndex+0x4a>
      47: 48                           	dec	eax
      48: eb 31                        	jmp	0x7b <GetInsertionIndex+0x7b>
      4a: 40                           	inc	eax
      4b: 83 f8 4c                     	cmp	eax, 76
      4e: 75 ee                        	jne	0x3e <GetInsertionIndex+0x3e>
      50: 50                           	push	eax
      51: 50                           	push	eax
      52: 68 8f 00 00 00               	push	143
			00000053:  R_386_32	.rodata.GetInsertionIndex.str1.1
      57: 68 03 00 00 00               	push	3
			00000058:  R_386_32	.rodata.GetInsertionIndex.str1.1
      5c: 68 1f 00 00 00               	push	31
			0000005d:  R_386_32	.rodata.GetInsertionIndex.str1.1
      61: 68 92 00 00 00               	push	146
			00000062:  R_386_32	.rodata.GetInsertionIndex.str1.1
      66: 68 5a 00 00 00               	push	90
			00000067:  R_386_32	.rodata.GetInsertionIndex.str1.1
      6b: ff 35 00 00 00 00            	push	dword ptr [0]
			0000006d:  R_386_32	stderr
      71: e8 fc ff ff ff               	call	0x72 <GetInsertionIndex+0x72>
			00000072:  R_386_PC32	fprintf
      76: 83 c4 20                     	add	esp, 32
      79: 31 c0                        	xor	eax, eax
      7b: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      7e: c9                           	leave
      7f: c3                           	ret

Disassembly of section .text.GetSize:

00000000 <GetSize>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 52                           	push	edx
       5: 8b 18                        	mov	ebx, dword ptr [eax]
       7: 83 e3 fc                     	and	ebx, -4
       a: 39 5c 18 fc                  	cmp	dword ptr [eax + ebx - 4], ebx
       e: 74 29                        	je	0x39 <GetSize+0x39>
      10: 50                           	push	eax
      11: 50                           	push	eax
      12: 68 00 00 00 00               	push	0
			00000013:  R_386_32	.rodata.GetSize.str1.1
      17: 68 03 00 00 00               	push	3
			00000018:  R_386_32	.rodata.GetInsertionIndex.str1.1
      1c: 68 1f 00 00 00               	push	31
			0000001d:  R_386_32	.rodata.GetInsertionIndex.str1.1
      21: 68 04 00 00 00               	push	4
			00000022:  R_386_32	.rodata.GetSize.str1.1
      26: 68 5a 00 00 00               	push	90
			00000027:  R_386_32	.rodata.GetInsertionIndex.str1.1
      2b: ff 35 00 00 00 00            	push	dword ptr [0]
			0000002d:  R_386_32	stderr
      31: e8 fc ff ff ff               	call	0x32 <GetSize+0x32>
			00000032:  R_386_PC32	fprintf
      36: 83 c4 20                     	add	esp, 32
      39: 89 d8                        	mov	eax, ebx
      3b: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      3e: c9                           	leave
      3f: c3                           	ret

Disassembly of section .text.RemoveBlock:

00000000 <RemoveBlock>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 89 c3                        	mov	ebx, eax
       6: 51                           	push	ecx
       7: 8b 4a 08                     	mov	ecx, dword ptr [edx + 8]
       a: 8b 42 04                     	mov	eax, dword ptr [edx + 4]
       d: 85 c9                        	test	ecx, ecx
       f: 75 4f                        	jne	0x60 <RemoveBlock+0x60>
      11: 85 c0                        	test	eax, eax
      13: 75 3d                        	jne	0x52 <RemoveBlock+0x52>
      15: 3b 14 9d 00 00 00 00         	cmp	edx, dword ptr [4*ebx]
			00000018:  R_386_32	.bss._head_block
      1c: 74 29                        	je	0x47 <RemoveBlock+0x47>
      1e: 50                           	push	eax
      1f: 50                           	push	eax
      20: 68 00 00 00 00               	push	0
			00000021:  R_386_32	.rodata.RemoveBlock.str1.1
      25: 68 03 00 00 00               	push	3
			00000026:  R_386_32	.rodata.GetInsertionIndex.str1.1
      2a: 68 1f 00 00 00               	push	31
			0000002b:  R_386_32	.rodata.GetInsertionIndex.str1.1
      2f: 68 04 00 00 00               	push	4
			00000030:  R_386_32	.rodata.RemoveBlock.str1.1
      34: 68 5a 00 00 00               	push	90
			00000035:  R_386_32	.rodata.GetInsertionIndex.str1.1
      39: ff 35 00 00 00 00            	push	dword ptr [0]
			0000003b:  R_386_32	stderr
      3f: e8 fc ff ff ff               	call	0x40 <RemoveBlock+0x40>
			00000040:  R_386_PC32	fprintf
      44: 83 c4 20                     	add	esp, 32
      47: 31 c9                        	xor	ecx, ecx
      49: 89 0c 9d 00 00 00 00         	mov	dword ptr [4*ebx], ecx
			0000004c:  R_386_32	.bss._head_block
      50: eb 22                        	jmp	0x74 <RemoveBlock+0x74>
      52: 31 d2                        	xor	edx, edx
      54: 89 04 9d 00 00 00 00         	mov	dword ptr [4*ebx], eax
			00000057:  R_386_32	.bss._head_block
      5b: 89 50 08                     	mov	dword ptr [eax + 8], edx
      5e: eb 14                        	jmp	0x74 <RemoveBlock+0x74>
      60: 85 c0                        	test	eax, eax
      62: 75 07                        	jne	0x6b <RemoveBlock+0x6b>
      64: 31 c0                        	xor	eax, eax
      66: 89 41 04                     	mov	dword ptr [ecx + 4], eax
      69: eb 09                        	jmp	0x74 <RemoveBlock+0x74>
      6b: 89 41 04                     	mov	dword ptr [ecx + 4], eax
      6e: 8b 52 08                     	mov	edx, dword ptr [edx + 8]
      71: 89 50 08                     	mov	dword ptr [eax + 8], edx
      74: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      77: c9                           	leave
      78: c3                           	ret

Disassembly of section .text.AddBlock.isra.0:

00000000 <AddBlock.isra.0>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 89 c6                        	mov	esi, eax
       7: 53                           	push	ebx
       8: 83 ec 1c                     	sub	esp, 28
       b: 89 f0                        	mov	eax, esi
       d: 89 f3                        	mov	ebx, esi
       f: e8 fc ff ff ff               	call	0x10 <AddBlock.isra.0+0x10>
			00000010:  R_386_PC32	.text.GetSize
      14: 89 c7                        	mov	edi, eax
      16: 8d 40 f8                     	lea	eax, [eax - 8]
      19: e8 fc ff ff ff               	call	0x1a <AddBlock.isra.0+0x1a>
			0000001a:  R_386_PC32	.text.GetInsertionIndex
      1e: 8b 56 fc                     	mov	edx, dword ptr [esi - 4]
      21: 83 e2 fc                     	and	edx, -4
      24: 29 d3                        	sub	ebx, edx
      26: 89 fa                        	mov	edx, edi
      28: 83 e2 fc                     	and	edx, -4
      2b: f6 03 01                     	test	byte ptr [ebx], 1
      2e: 8d 0c 16                     	lea	ecx, [esi + edx]
      31: 89 4d e4                     	mov	dword ptr [ebp - 28], ecx
      34: 8b 11                        	mov	edx, dword ptr [ecx]
      36: 74 6b                        	je	0xa3 <AddBlock.isra.0+0xa3>
      38: 80 e2 01                     	and	dl, 1
      3b: 74 28                        	je	0x65 <AddBlock.isra.0+0x65>
      3d: 31 c9                        	xor	ecx, ecx
      3f: 89 4e 08                     	mov	dword ptr [esi + 8], ecx
      42: 8b 14 85 00 00 00 00         	mov	edx, dword ptr [4*eax]
			00000045:  R_386_32	.bss._head_block
      49: 89 56 04                     	mov	dword ptr [esi + 4], edx
      4c: 85 d2                        	test	edx, edx
      4e: 74 03                        	je	0x53 <AddBlock.isra.0+0x53>
      50: 89 72 08                     	mov	dword ptr [edx + 8], esi
      53: 89 34 85 00 00 00 00         	mov	dword ptr [4*eax], esi
			00000056:  R_386_32	.bss._head_block
      5a: 83 26 fe                     	and	dword ptr [esi], -2
      5d: 83 c4 1c                     	add	esp, 28
      60: 5b                           	pop	ebx
      61: 5e                           	pop	esi
      62: 5f                           	pop	edi
      63: 5d                           	pop	ebp
      64: c3                           	ret
      65: 8b 45 e4                     	mov	eax, dword ptr [ebp - 28]
      68: 89 f3                        	mov	ebx, esi
      6a: e8 fc ff ff ff               	call	0x6b <AddBlock.isra.0+0x6b>
			0000006b:  R_386_PC32	.text.GetSize
      6f: 83 e8 08                     	sub	eax, 8
      72: e8 fc ff ff ff               	call	0x73 <AddBlock.isra.0+0x73>
			00000073:  R_386_PC32	.text.GetInsertionIndex
      77: 8b 55 e4                     	mov	edx, dword ptr [ebp - 28]
      7a: e8 fc ff ff ff               	call	0x7b <AddBlock.isra.0+0x7b>
			0000007b:  R_386_PC32	.text.RemoveBlock
      7f: 8b 45 e4                     	mov	eax, dword ptr [ebp - 28]
      82: e8 fc ff ff ff               	call	0x83 <AddBlock.isra.0+0x83>
			00000083:  R_386_PC32	.text.GetSize
      87: 8d 14 07                     	lea	edx, [edi + eax]
      8a: 89 f0                        	mov	eax, esi
      8c: e8 fc ff ff ff               	call	0x8d <AddBlock.isra.0+0x8d>
			0000008d:  R_386_PC32	.text.SetSizeTags
      91: 31 d2                        	xor	edx, edx
      93: 83 26 fe                     	and	dword ptr [esi], -2
      96: 89 56 08                     	mov	dword ptr [esi + 8], edx
      99: 89 56 04                     	mov	dword ptr [esi + 4], edx
      9c: 89 de                        	mov	esi, ebx
      9e: e9 68 ff ff ff               	jmp	0xb <AddBlock.isra.0+0xb>
      a3: 80 e2 01                     	and	dl, 1
      a6: 89 d8                        	mov	eax, ebx
      a8: 74 20                        	je	0xca <AddBlock.isra.0+0xca>
      aa: e8 fc ff ff ff               	call	0xab <AddBlock.isra.0+0xab>
			000000ab:  R_386_PC32	.text.GetSize
      af: 83 e8 08                     	sub	eax, 8
      b2: e8 fc ff ff ff               	call	0xb3 <AddBlock.isra.0+0xb3>
			000000b3:  R_386_PC32	.text.GetInsertionIndex
      b7: 89 da                        	mov	edx, ebx
      b9: e8 fc ff ff ff               	call	0xba <AddBlock.isra.0+0xba>
			000000ba:  R_386_PC32	.text.RemoveBlock
      be: 89 d8                        	mov	eax, ebx
      c0: e8 fc ff ff ff               	call	0xc1 <AddBlock.isra.0+0xc1>
			000000c1:  R_386_PC32	.text.GetSize
      c5: 8d 14 07                     	lea	edx, [edi + eax]
      c8: eb 43                        	jmp	0x10d <AddBlock.isra.0+0x10d>
      ca: e8 fc ff ff ff               	call	0xcb <AddBlock.isra.0+0xcb>
			000000cb:  R_386_PC32	.text.GetSize
      cf: 83 e8 08                     	sub	eax, 8
      d2: e8 fc ff ff ff               	call	0xd3 <AddBlock.isra.0+0xd3>
			000000d3:  R_386_PC32	.text.GetInsertionIndex
      d7: 89 da                        	mov	edx, ebx
      d9: e8 fc ff ff ff               	call	0xda <AddBlock.isra.0+0xda>
			000000da:  R_386_PC32	.text.RemoveBlock
      de: 8b 45 e4                     	mov	eax, dword ptr [ebp - 28]
      e1: e8 fc ff ff ff               	call	0xe2 <AddBlock.isra.0+0xe2>
			000000e2:  R_386_PC32	.text.GetSize
      e6: 83 e8 08                     	sub	eax, 8
      e9: e8 fc ff ff ff               	call	0xea <AddBlock.isra.0+0xea>
			000000ea:  R_386_PC32	.text.GetInsertionIndex
      ee: 8b 55 e4                     	mov	edx, dword ptr [ebp - 28]
      f1: e8 fc ff ff ff               	call	0xf2 <AddBlock.isra.0+0xf2>
			000000f2:  R_386_PC32	.text.RemoveBlock
      f6: 89 d8                        	mov	eax, ebx
      f8: e8 fc ff ff ff               	call	0xf9 <AddBlock.isra.0+0xf9>
			000000f9:  R_386_PC32	.text.GetSize
      fd: 89 c6                        	mov	esi, eax
      ff: 8b 45 e4                     	mov	eax, dword ptr [ebp - 28]
     102: e8 fc ff ff ff               	call	0x103 <AddBlock.isra.0+0x103>
			00000103:  R_386_PC32	.text.GetSize
     107: 89 f2                        	mov	edx, esi
     109: 01 c2                        	add	edx, eax
     10b: 01 fa                        	add	edx, edi
     10d: 89 d8                        	mov	eax, ebx
     10f: e8 fc ff ff ff               	call	0x110 <AddBlock.isra.0+0x110>
			00000110:  R_386_PC32	.text.SetSizeTags
     114: 31 c0                        	xor	eax, eax
     116: 89 43 08                     	mov	dword ptr [ebx + 8], eax
     119: 89 43 04                     	mov	dword ptr [ebx + 4], eax
     11c: 8b 03                        	mov	eax, dword ptr [ebx]
     11e: 83 e0 fe                     	and	eax, -2
     121: 89 03                        	mov	dword ptr [ebx], eax
     123: e9 74 ff ff ff               	jmp	0x9c <AddBlock.isra.0+0x9c>

Disassembly of section .text.AllocateBlock:

00000000 <AllocateBlock>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 89 cf                        	mov	edi, ecx
       6: 56                           	push	esi
       7: 53                           	push	ebx
       8: 89 c3                        	mov	ebx, eax
       a: 83 ec 1c                     	sub	esp, 28
       d: 89 55 e0                     	mov	dword ptr [ebp - 32], edx
      10: 85 c0                        	test	eax, eax
      12: 75 29                        	jne	0x3d <AllocateBlock+0x3d>
      14: 52                           	push	edx
      15: 52                           	push	edx
      16: 68 00 00 00 00               	push	0
			00000017:  R_386_32	.rodata.AllocateBlock.str1.1
      1b: 68 03 00 00 00               	push	3
			0000001c:  R_386_32	.rodata.GetInsertionIndex.str1.1
      20: 68 1f 00 00 00               	push	31
			00000021:  R_386_32	.rodata.GetInsertionIndex.str1.1
      25: 68 04 00 00 00               	push	4
			00000026:  R_386_32	.rodata.AllocateBlock.str1.1
      2a: 68 5a 00 00 00               	push	90
			0000002b:  R_386_32	.rodata.GetInsertionIndex.str1.1
      2f: ff 35 00 00 00 00            	push	dword ptr [0]
			00000031:  R_386_32	stderr
      35: e8 fc ff ff ff               	call	0x36 <AllocateBlock+0x36>
			00000036:  R_386_PC32	fprintf
      3a: 83 c4 20                     	add	esp, 32
      3d: 89 d8                        	mov	eax, ebx
      3f: 83 c7 08                     	add	edi, 8
      42: e8 fc ff ff ff               	call	0x43 <AllocateBlock+0x43>
			00000043:  R_386_PC32	.text.GetSize
      47: 89 45 e4                     	mov	dword ptr [ebp - 28], eax
      4a: 39 f8                        	cmp	eax, edi
      4c: 73 29                        	jae	0x77 <AllocateBlock+0x77>
      4e: 50                           	push	eax
      4f: 50                           	push	eax
      50: 68 19 00 00 00               	push	25
			00000051:  R_386_32	.rodata.AllocateBlock.str1.1
      55: 68 03 00 00 00               	push	3
			00000056:  R_386_32	.rodata.GetInsertionIndex.str1.1
      5a: 68 1f 00 00 00               	push	31
			0000005b:  R_386_32	.rodata.GetInsertionIndex.str1.1
      5f: 68 1d 00 00 00               	push	29
			00000060:  R_386_32	.rodata.AllocateBlock.str1.1
      64: 68 5a 00 00 00               	push	90
			00000065:  R_386_32	.rodata.GetInsertionIndex.str1.1
      69: ff 35 00 00 00 00            	push	dword ptr [0]
			0000006b:  R_386_32	stderr
      6f: e8 fc ff ff ff               	call	0x70 <AllocateBlock+0x70>
			00000070:  R_386_PC32	fprintf
      74: 83 c4 20                     	add	esp, 32
      77: 8b 75 e4                     	mov	esi, dword ptr [ebp - 28]
      7a: 8b 45 e0                     	mov	eax, dword ptr [ebp - 32]
      7d: 89 da                        	mov	edx, ebx
      7f: 29 fe                        	sub	esi, edi
      81: 83 fe 0f                     	cmp	esi, 15
      84: 77 16                        	ja	0x9c <AllocateBlock+0x9c>
      86: e8 fc ff ff ff               	call	0x87 <AllocateBlock+0x87>
			00000087:  R_386_PC32	.text.RemoveBlock
      8b: 8b 55 e4                     	mov	edx, dword ptr [ebp - 28]
      8e: 89 d8                        	mov	eax, ebx
      90: 89 de                        	mov	esi, ebx
      92: e8 fc ff ff ff               	call	0x93 <AllocateBlock+0x93>
			00000093:  R_386_PC32	.text.SetSizeTags
      97: 83 0b 01                     	or	dword ptr [ebx], 1
      9a: eb 29                        	jmp	0xc5 <AllocateBlock+0xc5>
      9c: e8 fc ff ff ff               	call	0x9d <AllocateBlock+0x9d>
			0000009d:  R_386_PC32	.text.RemoveBlock
      a1: 89 f2                        	mov	edx, esi
      a3: 83 e6 fc                     	and	esi, -4
      a6: 89 d8                        	mov	eax, ebx
      a8: e8 fc ff ff ff               	call	0xa9 <AllocateBlock+0xa9>
			000000a9:  R_386_PC32	.text.SetSizeTags
      ad: 01 de                        	add	esi, ebx
      af: 89 fa                        	mov	edx, edi
      b1: 89 f0                        	mov	eax, esi
      b3: e8 fc ff ff ff               	call	0xb4 <AllocateBlock+0xb4>
			000000b4:  R_386_PC32	.text.SetSizeTags
      b8: 83 0e 01                     	or	dword ptr [esi], 1
      bb: 89 d8                        	mov	eax, ebx
      bd: 83 23 fe                     	and	dword ptr [ebx], -2
      c0: e8 fc ff ff ff               	call	0xc1 <AllocateBlock+0xc1>
			000000c1:  R_386_PC32	.text.AddBlock.isra.0
      c5: 8d 65 f4                     	lea	esp, [ebp - 12]
      c8: 89 f0                        	mov	eax, esi
      ca: 5b                           	pop	ebx
      cb: 5e                           	pop	esi
      cc: 5f                           	pop	edi
      cd: 5d                           	pop	ebp
      ce: c3                           	ret

Disassembly of section .text.malloc:

00000000 <malloc>:
       0: 55                           	push	ebp
       1: 31 c0                        	xor	eax, eax
       3: 89 e5                        	mov	ebp, esp
       5: 57                           	push	edi
       6: 56                           	push	esi
       7: 53                           	push	ebx
       8: 83 ec 1c                     	sub	esp, 28
       b: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       e: 85 d2                        	test	edx, edx
      10: 0f 84 32 01 00 00            	je	0x148 <malloc+0x148>
      16: b8 08 00 00 00               	mov	eax, 8
      1b: 39 c2                        	cmp	edx, eax
      1d: 0f 42 d0                     	cmovb	edx, eax
      20: 31 c0                        	xor	eax, eax
      22: 83 c2 07                     	add	edx, 7
      25: 83 e2 f8                     	and	edx, -8
      28: 89 55 e4                     	mov	dword ptr [ebp - 28], edx
      2b: 8b 4d e4                     	mov	ecx, dword ptr [ebp - 28]
      2e: 39 0c 85 00 00 00 00         	cmp	dword ptr [4*eax], ecx
			00000031:  R_386_32	.rodata.free_list_block_sizes
      35: 73 03                        	jae	0x3a <malloc+0x3a>
      37: 40                           	inc	eax
      38: eb f1                        	jmp	0x2b <malloc+0x2b>
      3a: 89 c2                        	mov	edx, eax
      3c: 8b 1c 95 00 00 00 00         	mov	ebx, dword ptr [4*edx]
			0000003f:  R_386_32	.bss._head_block
      43: 85 db                        	test	ebx, ebx
      45: 74 08                        	je	0x4f <malloc+0x4f>
      47: 8b 4d e4                     	mov	ecx, dword ptr [ebp - 28]
      4a: e9 c0 00 00 00               	jmp	0x10f <malloc+0x10f>
      4f: 42                           	inc	edx
      50: 83 fa 4d                     	cmp	edx, 77
      53: 75 e7                        	jne	0x3c <malloc+0x3c>
      55: 8b 34 85 04 00 00 00         	mov	esi, dword ptr [4*eax + 4]
			00000058:  R_386_32	.rodata.free_list_block_sizes
      5c: 8d 46 08                     	lea	eax, [esi + 8]
      5f: 89 45 e0                     	mov	dword ptr [ebp - 32], eax
      62: 8d 46 18                     	lea	eax, [esi + 24]
      65: 53                           	push	ebx
      66: 53                           	push	ebx
      67: 6a 00                        	push	0
      69: 6a ff                        	push	-1
      6b: 6a 10                        	push	16
      6d: 6a 06                        	push	6
      6f: 50                           	push	eax
      70: 6a 00                        	push	0
      72: e8 fc ff ff ff               	call	0x73 <malloc+0x73>
			00000073:  R_386_PC32	mmap
      77: 83 c4 20                     	add	esp, 32
      7a: 89 c3                        	mov	ebx, eax
      7c: 85 c0                        	test	eax, eax
      7e: 74 3f                        	je	0xbf <malloc+0xbf>
      80: ba 08 00 00 00               	mov	edx, 8
      85: 83 c6 10                     	add	esi, 16
      88: 8d 78 08                     	lea	edi, [eax + 8]
      8b: e8 fc ff ff ff               	call	0x8c <malloc+0x8c>
			0000008c:  R_386_PC32	.text.SetSizeTags
      90: 83 e6 fc                     	and	esi, -4
      93: 8b 55 e0                     	mov	edx, dword ptr [ebp - 32]
      96: 01 c6                        	add	esi, eax
      98: 89 f8                        	mov	eax, edi
      9a: e8 fc ff ff ff               	call	0x9b <malloc+0x9b>
			0000009b:  R_386_PC32	.text.SetSizeTags
      9f: ba 08 00 00 00               	mov	edx, 8
      a4: 89 f0                        	mov	eax, esi
      a6: e8 fc ff ff ff               	call	0xa7 <malloc+0xa7>
			000000a7:  R_386_PC32	.text.SetSizeTags
      ab: 31 c9                        	xor	ecx, ecx
      ad: 83 0b 01                     	or	dword ptr [ebx], 1
      b0: 89 4b 10                     	mov	dword ptr [ebx + 16], ecx
      b3: 89 4b 0c                     	mov	dword ptr [ebx + 12], ecx
      b6: 83 0e 01                     	or	dword ptr [esi], 1
      b9: 83 63 08 fe                  	and	dword ptr [ebx + 8], -2
      bd: 89 fb                        	mov	ebx, edi
      bf: 89 d8                        	mov	eax, ebx
      c1: e8 fc ff ff ff               	call	0xc2 <malloc+0xc2>
			000000c2:  R_386_PC32	.text.GetSize
      c6: 83 e8 08                     	sub	eax, 8
      c9: e8 fc ff ff ff               	call	0xca <malloc+0xca>
			000000ca:  R_386_PC32	.text.GetInsertionIndex
      ce: 83 3c 85 00 00 00 00 00      	cmp	dword ptr [4*eax], 0
			000000d1:  R_386_32	.bss._head_block
      d6: 89 c6                        	mov	esi, eax
      d8: 74 29                        	je	0x103 <malloc+0x103>
      da: 52                           	push	edx
      db: 52                           	push	edx
      dc: 68 00 00 00 00               	push	0
			000000dd:  R_386_32	.rodata.malloc.str1.1
      e1: 68 03 00 00 00               	push	3
			000000e2:  R_386_32	.rodata.GetInsertionIndex.str1.1
      e6: 68 1f 00 00 00               	push	31
			000000e7:  R_386_32	.rodata.GetInsertionIndex.str1.1
      eb: 68 04 00 00 00               	push	4
			000000ec:  R_386_32	.rodata.malloc.str1.1
      f0: 68 5a 00 00 00               	push	90
			000000f1:  R_386_32	.rodata.GetInsertionIndex.str1.1
      f5: ff 35 00 00 00 00            	push	dword ptr [0]
			000000f7:  R_386_32	stderr
      fb: e8 fc ff ff ff               	call	0xfc <malloc+0xfc>
			000000fc:  R_386_PC32	fprintf
     100: 83 c4 20                     	add	esp, 32
     103: 89 1c b5 00 00 00 00         	mov	dword ptr [4*esi], ebx
			00000106:  R_386_32	.bss._head_block
     10a: 8b 4d e4                     	mov	ecx, dword ptr [ebp - 28]
     10d: 89 f2                        	mov	edx, esi
     10f: 89 d8                        	mov	eax, ebx
     111: e8 fc ff ff ff               	call	0x112 <malloc+0x112>
			00000112:  R_386_PC32	.text.AllocateBlock
     116: 89 c3                        	mov	ebx, eax
     118: a8 07                        	test	al, 7
     11a: 74 29                        	je	0x145 <malloc+0x145>
     11c: 50                           	push	eax
     11d: 50                           	push	eax
     11e: 68 28 00 00 00               	push	40
			0000011f:  R_386_32	.rodata.malloc.str1.1
     123: 68 03 00 00 00               	push	3
			00000124:  R_386_32	.rodata.GetInsertionIndex.str1.1
     128: 68 1f 00 00 00               	push	31
			00000129:  R_386_32	.rodata.GetInsertionIndex.str1.1
     12d: 68 2c 00 00 00               	push	44
			0000012e:  R_386_32	.rodata.malloc.str1.1
     132: 68 5a 00 00 00               	push	90
			00000133:  R_386_32	.rodata.GetInsertionIndex.str1.1
     137: ff 35 00 00 00 00            	push	dword ptr [0]
			00000139:  R_386_32	stderr
     13d: e8 fc ff ff ff               	call	0x13e <malloc+0x13e>
			0000013e:  R_386_PC32	fprintf
     142: 83 c4 20                     	add	esp, 32
     145: 8d 43 04                     	lea	eax, [ebx + 4]
     148: 8d 65 f4                     	lea	esp, [ebp - 12]
     14b: 5b                           	pop	ebx
     14c: 5e                           	pop	esi
     14d: 5f                           	pop	edi
     14e: 5d                           	pop	ebp
     14f: c3                           	ret

Disassembly of section .text.free:

00000000 <free>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 85 c0                        	test	eax, eax
       8: 74 11                        	je	0x1b <free+0x1b>
       a: 31 d2                        	xor	edx, edx
       c: 83 e8 04                     	sub	eax, 4
       f: 89 50 08                     	mov	dword ptr [eax + 8], edx
      12: 89 50 04                     	mov	dword ptr [eax + 4], edx
      15: 5d                           	pop	ebp
      16: e9 fc ff ff ff               	jmp	0x17 <free+0x17>
			00000017:  R_386_PC32	.text.AddBlock.isra.0
      1b: 5d                           	pop	ebp
      1c: c3                           	ret

Disassembly of section .text.calloc:

00000000 <calloc>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8b 75 0c                     	mov	esi, dword ptr [ebp + 12]
       8: 0f af 75 08                  	imul	esi, dword ptr [ebp + 8]
       c: 83 ec 0c                     	sub	esp, 12
       f: 56                           	push	esi
      10: e8 fc ff ff ff               	call	0x11 <calloc+0x11>
			00000011:  R_386_PC32	malloc
      15: 83 c4 10                     	add	esp, 16
      18: 89 c3                        	mov	ebx, eax
      1a: 85 c0                        	test	eax, eax
      1c: 74 0d                        	je	0x2b <calloc+0x2b>
      1e: 50                           	push	eax
      1f: 56                           	push	esi
      20: 6a 00                        	push	0
      22: 53                           	push	ebx
      23: e8 fc ff ff ff               	call	0x24 <calloc+0x24>
			00000024:  R_386_PC32	memset
      28: 83 c4 10                     	add	esp, 16
      2b: 8d 65 f8                     	lea	esp, [ebp - 8]
      2e: 89 d8                        	mov	eax, ebx
      30: 5b                           	pop	ebx
      31: 5e                           	pop	esi
      32: 5d                           	pop	ebp
      33: c3                           	ret

libc/x86/libc.a(stdio.o):	file format elf32-i386

Disassembly of section .text._file_read:

00000000 <_file_read>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 8b 00                        	mov	eax, dword ptr [eax]
       8: 89 45 08                     	mov	dword ptr [ebp + 8], eax
       b: 5d                           	pop	ebp
       c: e9 fc ff ff ff               	jmp	0xd <_file_read+0xd>
			0000000d:  R_386_PC32	read

Disassembly of section .text._file_write:

00000000 <_file_write>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 8b 00                        	mov	eax, dword ptr [eax]
       8: 89 45 08                     	mov	dword ptr [ebp + 8], eax
       b: 5d                           	pop	ebp
       c: e9 fc ff ff ff               	jmp	0xd <_file_write+0xd>
			0000000d:  R_386_PC32	write

Disassembly of section .text._mem_write:

00000000 <_mem_write>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       8: 8b 75 10                     	mov	esi, dword ptr [ebp + 16]
       b: 8b 43 28                     	mov	eax, dword ptr [ebx + 40]
       e: a8 03                        	test	al, 3
      10: 75 0d                        	jne	0x1f <_mem_write+0x1f>
      12: e8 fc ff ff ff               	call	0x13 <_mem_write+0x13>
			00000013:  R_386_PC32	__thread_local_errno_
      17: c7 00 07 00 00 00            	mov	dword ptr [eax], 7
      1d: eb 32                        	jmp	0x51 <_mem_write+0x51>
      1f: a8 40                        	test	al, 64
      21: 75 18                        	jne	0x3b <_mem_write+0x3b>
      23: 8b 43 34                     	mov	eax, dword ptr [ebx + 52]
      26: 8d 14 30                     	lea	edx, [eax + esi]
      29: 3b 53 30                     	cmp	edx, dword ptr [ebx + 48]
      2c: 72 28                        	jb	0x56 <_mem_write+0x56>
      2e: e8 fc ff ff ff               	call	0x2f <_mem_write+0x2f>
			0000002f:  R_386_PC32	__thread_local_errno_
      33: c7 00 0c 00 00 00            	mov	dword ptr [eax], 12
      39: eb 16                        	jmp	0x51 <_mem_write+0x51>
      3b: 8b 53 2c                     	mov	edx, dword ptr [ebx + 44]
      3e: 8b 43 34                     	mov	eax, dword ptr [ebx + 52]
      41: 80 3c 02 00                  	cmp	byte ptr [edx + eax], 0
      45: 74 dc                        	je	0x23 <_mem_write+0x23>
      47: 39 f0                        	cmp	eax, esi
      49: 73 d8                        	jae	0x23 <_mem_write+0x23>
      4b: 40                           	inc	eax
      4c: 89 43 34                     	mov	dword ptr [ebx + 52], eax
      4f: eb ed                        	jmp	0x3e <_mem_write+0x3e>
      51: 83 c8 ff                     	or	eax, -1
      54: eb 16                        	jmp	0x6c <_mem_write+0x6c>
      56: 52                           	push	edx
      57: 56                           	push	esi
      58: ff 75 0c                     	push	dword ptr [ebp + 12]
      5b: 03 43 2c                     	add	eax, dword ptr [ebx + 44]
      5e: 50                           	push	eax
      5f: e8 fc ff ff ff               	call	0x60 <_mem_write+0x60>
			00000060:  R_386_PC32	memcpy
      64: 01 73 34                     	add	dword ptr [ebx + 52], esi
      67: 89 f0                        	mov	eax, esi
      69: 83 c4 10                     	add	esp, 16
      6c: 8d 65 f8                     	lea	esp, [ebp - 8]
      6f: 5b                           	pop	ebx
      70: 5e                           	pop	esi
      71: 5d                           	pop	ebp
      72: c3                           	ret

Disassembly of section .text.fopen_existing_stream:

00000000 <fopen_existing_stream>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 89 c7                        	mov	edi, eax
       6: 56                           	push	esi
       7: 89 d6                        	mov	esi, edx
       9: 53                           	push	ebx
       a: 83 ec 1c                     	sub	esp, 28
       d: 85 d2                        	test	edx, edx
       f: 0f 94 c0                     	sete	al
      12: 85 c9                        	test	ecx, ecx
      14: 0f 94 c2                     	sete	dl
      17: 08 d0                        	or	al, dl
      19: 75 47                        	jne	0x62 <fopen_existing_stream+0x62>
      1b: 85 ff                        	test	edi, edi
      1d: 74 43                        	je	0x62 <fopen_existing_stream+0x62>
      1f: 83 ec 0c                     	sub	esp, 12
      22: c7 41 04 ff ff ff ff         	mov	dword ptr [ecx + 4], 4294967295
      29: 89 cb                        	mov	ebx, ecx
      2b: 66 c7 41 08 00 00            	mov	word ptr [ecx + 8], 0
      31: 68 00 02 00 00               	push	512
      36: e8 fc ff ff ff               	call	0x37 <fopen_existing_stream+0x37>
			00000037:  R_386_PC32	malloc
      3b: 31 c9                        	xor	ecx, ecx
      3d: c7 43 18 00 02 00 00         	mov	dword ptr [ebx + 24], 512
      44: 89 43 10                     	mov	dword ptr [ebx + 16], eax
      47: 31 c0                        	xor	eax, eax
      49: 89 4b 14                     	mov	dword ptr [ebx + 20], ecx
      4c: c6 43 1c 01                  	mov	byte ptr [ebx + 28], 1
      50: 89 43 3c                     	mov	dword ptr [ebx + 60], eax
      53: 89 34 24                     	mov	dword ptr [esp], esi
      56: e8 fc ff ff ff               	call	0x57 <fopen_existing_stream+0x57>
			00000057:  R_386_PC32	strlen
      5b: 83 c4 10                     	add	esp, 16
      5e: 85 c0                        	test	eax, eax
      60: 75 12                        	jne	0x74 <fopen_existing_stream+0x74>
      62: e8 fc ff ff ff               	call	0x63 <fopen_existing_stream+0x63>
			00000063:  R_386_PC32	__thread_local_errno_
      67: c7 00 07 00 00 00            	mov	dword ptr [eax], 7
      6d: 31 db                        	xor	ebx, ebx
      6f: e9 98 00 00 00               	jmp	0x10c <fopen_existing_stream+0x10c>
      74: 83 ec 0c                     	sub	esp, 12
      77: 56                           	push	esi
      78: e8 fc ff ff ff               	call	0x79 <fopen_existing_stream+0x79>
			00000079:  R_386_PC32	strlen
      7d: 83 c4 10                     	add	esp, 16
      80: 83 f8 03                     	cmp	eax, 3
      83: 77 dd                        	ja	0x62 <fopen_existing_stream+0x62>
      85: 8a 06                        	mov	al, byte ptr [esi]
      87: 3c 72                        	cmp	al, 114
      89: 74 0f                        	je	0x9a <fopen_existing_stream+0x9a>
      8b: 3c 77                        	cmp	al, 119
      8d: 74 0f                        	je	0x9e <fopen_existing_stream+0x9e>
      8f: 3c 61                        	cmp	al, 97
      91: 75 cf                        	jne	0x62 <fopen_existing_stream+0x62>
      93: ba 45 00 00 00               	mov	edx, 69
      98: eb 15                        	jmp	0xaf <fopen_existing_stream+0xaf>
      9a: 31 d2                        	xor	edx, edx
      9c: eb 11                        	jmp	0xaf <fopen_existing_stream+0xaf>
      9e: ba 25 00 00 00               	mov	edx, 37
      a3: eb 0a                        	jmp	0xaf <fopen_existing_stream+0xaf>
      a5: 3c 2b                        	cmp	al, 43
      a7: 75 10                        	jne	0xb9 <fopen_existing_stream+0xb9>
      a9: 83 e2 fc                     	and	edx, -4
      ac: 83 ca 02                     	or	edx, 2
      af: 8a 46 01                     	mov	al, byte ptr [esi + 1]
      b2: 46                           	inc	esi
      b3: 84 c0                        	test	al, al
      b5: 75 ee                        	jne	0xa5 <fopen_existing_stream+0xa5>
      b7: eb 09                        	jmp	0xc2 <fopen_existing_stream+0xc2>
      b9: 3c 78                        	cmp	al, 120
      bb: 75 f2                        	jne	0xaf <fopen_existing_stream+0xaf>
      bd: 83 ca 08                     	or	edx, 8
      c0: eb ed                        	jmp	0xaf <fopen_existing_stream+0xaf>
      c2: 80 7b 48 00                  	cmp	byte ptr [ebx + 72], 0
      c6: 89 53 28                     	mov	dword ptr [ebx + 40], edx
      c9: 74 07                        	je	0xd2 <fopen_existing_stream+0xd2>
      cb: 31 d2                        	xor	edx, edx
      cd: 89 53 0c                     	mov	dword ptr [ebx + 12], edx
      d0: eb 3a                        	jmp	0x10c <fopen_existing_stream+0x10c>
      d2: 50                           	push	eax
      d3: 68 b6 01 00 00               	push	438
      d8: 52                           	push	edx
      d9: 89 55 e4                     	mov	dword ptr [ebp - 28], edx
      dc: 57                           	push	edi
      dd: e8 fc ff ff ff               	call	0xde <fopen_existing_stream+0xde>
			000000de:  R_386_PC32	open
      e2: 83 c4 10                     	add	esp, 16
      e5: 89 c6                        	mov	esi, eax
      e7: 83 f8 ff                     	cmp	eax, -1
      ea: 74 81                        	je	0x6d <fopen_existing_stream+0x6d>
      ec: 8b 55 e4                     	mov	edx, dword ptr [ebp - 28]
      ef: 83 e2 03                     	and	edx, 3
      f2: 74 13                        	je	0x107 <fopen_existing_stream+0x107>
      f4: 83 ec 0c                     	sub	esp, 12
      f7: 50                           	push	eax
      f8: e8 fc ff ff ff               	call	0xf9 <fopen_existing_stream+0xf9>
			000000f9:  R_386_PC32	isatty
      fd: 31 d2                        	xor	edx, edx
      ff: 83 c4 10                     	add	esp, 16
     102: 85 c0                        	test	eax, eax
     104: 0f 95 c2                     	setne	dl
     107: 89 53 0c                     	mov	dword ptr [ebx + 12], edx
     10a: 89 33                        	mov	dword ptr [ebx], esi
     10c: 8d 65 f4                     	lea	esp, [ebp - 12]
     10f: 89 d8                        	mov	eax, ebx
     111: 5b                           	pop	ebx
     112: 5e                           	pop	esi
     113: 5f                           	pop	edi
     114: 5d                           	pop	ebp
     115: c3                           	ret

Disassembly of section .text._mem_read:

00000000 <_mem_read>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       8: 8b 75 10                     	mov	esi, dword ptr [ebp + 16]
       b: 8b 43 28                     	mov	eax, dword ptr [ebx + 40]
       e: 83 e0 03                     	and	eax, 3
      11: 48                           	dec	eax
      12: 75 10                        	jne	0x24 <_mem_read+0x24>
      14: e8 fc ff ff ff               	call	0x15 <_mem_read+0x15>
			00000015:  R_386_PC32	__thread_local_errno_
      19: 83 ca ff                     	or	edx, -1
      1c: c7 00 07 00 00 00            	mov	dword ptr [eax], 7
      22: eb 2d                        	jmp	0x51 <_mem_read+0x51>
      24: 8b 43 34                     	mov	eax, dword ptr [ebx + 52]
      27: 8b 4b 30                     	mov	ecx, dword ptr [ebx + 48]
      2a: 31 d2                        	xor	edx, edx
      2c: 39 c8                        	cmp	eax, ecx
      2e: 73 21                        	jae	0x51 <_mem_read+0x51>
      30: 8d 14 30                     	lea	edx, [eax + esi]
      33: 39 ca                        	cmp	edx, ecx
      35: 72 04                        	jb	0x3b <_mem_read+0x3b>
      37: 29 c1                        	sub	ecx, eax
      39: 89 ce                        	mov	esi, ecx
      3b: 52                           	push	edx
      3c: 56                           	push	esi
      3d: 03 43 2c                     	add	eax, dword ptr [ebx + 44]
      40: 50                           	push	eax
      41: ff 75 0c                     	push	dword ptr [ebp + 12]
      44: e8 fc ff ff ff               	call	0x45 <_mem_read+0x45>
			00000045:  R_386_PC32	memcpy
      49: 01 73 34                     	add	dword ptr [ebx + 52], esi
      4c: 89 f2                        	mov	edx, esi
      4e: 83 c4 10                     	add	esp, 16
      51: 8d 65 f8                     	lea	esp, [ebp - 8]
      54: 89 d0                        	mov	eax, edx
      56: 5b                           	pop	ebx
      57: 5e                           	pop	esi
      58: 5d                           	pop	ebp
      59: c3                           	ret

Disassembly of section .text.fmemopen:

00000000 <fmemopen>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 83 ec 0c                     	sub	esp, 12
       9: 8b 75 0c                     	mov	esi, dword ptr [ebp + 12]
       c: 85 f6                        	test	esi, esi
       e: 74 66                        	je	0x76 <fmemopen+0x76>
      10: 83 ec 0c                     	sub	esp, 12
      13: 6a 4c                        	push	76
      15: e8 fc ff ff ff               	call	0x16 <fmemopen+0x16>
			00000016:  R_386_PC32	malloc
      1a: 31 d2                        	xor	edx, edx
      1c: 89 50 40                     	mov	dword ptr [eax + 64], edx
      1f: 8b 55 10                     	mov	edx, dword ptr [ebp + 16]
      22: 89 c7                        	mov	edi, eax
      24: 89 c1                        	mov	ecx, eax
      26: c7 40 44 ff ff ff ff         	mov	dword ptr [eax + 68], 4294967295
      2d: c6 40 48 01                  	mov	byte ptr [eax + 72], 1
      31: c7 40 20 00 00 00 00         	mov	dword ptr [eax + 32], 0
			00000034:  R_386_32	_mem_read
      38: c7 40 24 00 00 00 00         	mov	dword ptr [eax + 36], 0
			0000003b:  R_386_32	_mem_write
      3f: b8 00 00 00 00               	mov	eax, 0
			00000040:  R_386_32	.rodata.fmemopen.str1.1
      44: e8 fc ff ff ff               	call	0x45 <fmemopen+0x45>
			00000045:  R_386_PC32	.text.fopen_existing_stream
      49: 31 c9                        	xor	ecx, ecx
      4b: 83 c4 10                     	add	esp, 16
      4e: 83 7d 08 00                  	cmp	dword ptr [ebp + 8], 0
      52: 89 77 30                     	mov	dword ptr [edi + 48], esi
      55: 89 c3                        	mov	ebx, eax
      57: 89 4f 34                     	mov	dword ptr [edi + 52], ecx
      5a: 75 29                        	jne	0x85 <fmemopen+0x85>
      5c: 83 ec 0c                     	sub	esp, 12
      5f: 56                           	push	esi
      60: e8 fc ff ff ff               	call	0x61 <fmemopen+0x61>
			00000061:  R_386_PC32	malloc
      65: 83 c4 10                     	add	esp, 16
      68: 89 47 2c                     	mov	dword ptr [edi + 44], eax
      6b: c6 00 00                     	mov	byte ptr [eax], 0
      6e: 83 7f 2c 00                  	cmp	dword ptr [edi + 44], 0
      72: b0 01                        	mov	al, 1
      74: 75 17                        	jne	0x8d <fmemopen+0x8d>
      76: e8 fc ff ff ff               	call	0x77 <fmemopen+0x77>
			00000077:  R_386_PC32	__thread_local_errno_
      7b: 31 db                        	xor	ebx, ebx
      7d: c7 00 02 00 00 00            	mov	dword ptr [eax], 2
      83: eb 45                        	jmp	0xca <fmemopen+0xca>
      85: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      88: 89 47 2c                     	mov	dword ptr [edi + 44], eax
      8b: 31 c0                        	xor	eax, eax
      8d: 88 47 38                     	mov	byte ptr [edi + 56], al
      90: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
      93: 80 38 61                     	cmp	byte ptr [eax], 97
      96: 75 16                        	jne	0xae <fmemopen+0xae>
      98: 8b 57 2c                     	mov	edx, dword ptr [edi + 44]
      9b: 8b 47 34                     	mov	eax, dword ptr [edi + 52]
      9e: 80 3c 02 00                  	cmp	byte ptr [edx + eax], 0
      a2: 74 26                        	je	0xca <fmemopen+0xca>
      a4: 39 f0                        	cmp	eax, esi
      a6: 73 22                        	jae	0xca <fmemopen+0xca>
      a8: 40                           	inc	eax
      a9: 89 47 34                     	mov	dword ptr [edi + 52], eax
      ac: eb ed                        	jmp	0x9b <fmemopen+0x9b>
      ae: 50                           	push	eax
      af: 50                           	push	eax
      b0: 68 01 00 00 00               	push	1
			000000b1:  R_386_32	.rodata.fmemopen.str1.1
      b5: ff 75 10                     	push	dword ptr [ebp + 16]
      b8: e8 fc ff ff ff               	call	0xb9 <fmemopen+0xb9>
			000000b9:  R_386_PC32	strcmp
      bd: 83 c4 10                     	add	esp, 16
      c0: 85 c0                        	test	eax, eax
      c2: 75 06                        	jne	0xca <fmemopen+0xca>
      c4: 8b 47 2c                     	mov	eax, dword ptr [edi + 44]
      c7: c6 00 00                     	mov	byte ptr [eax], 0
      ca: 8d 65 f4                     	lea	esp, [ebp - 12]
      cd: 89 d8                        	mov	eax, ebx
      cf: 5b                           	pop	ebx
      d0: 5e                           	pop	esi
      d1: 5f                           	pop	edi
      d2: 5d                           	pop	ebp
      d3: c3                           	ret

Disassembly of section .text.fopen:

00000000 <fopen>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       8: 8b 75 0c                     	mov	esi, dword ptr [ebp + 12]
       b: 83 ec 0c                     	sub	esp, 12
       e: 6a 4c                        	push	76
      10: e8 fc ff ff ff               	call	0x11 <fopen+0x11>
			00000011:  R_386_PC32	malloc
      15: 83 c4 10                     	add	esp, 16
      18: 89 f2                        	mov	edx, esi
      1a: 89 c1                        	mov	ecx, eax
      1c: 31 c0                        	xor	eax, eax
      1e: 89 41 40                     	mov	dword ptr [ecx + 64], eax
      21: 89 d8                        	mov	eax, ebx
      23: c7 41 44 ff ff ff ff         	mov	dword ptr [ecx + 68], 4294967295
      2a: c6 41 48 00                  	mov	byte ptr [ecx + 72], 0
      2e: c7 41 20 00 00 00 00         	mov	dword ptr [ecx + 32], 0
			00000031:  R_386_32	_file_read
      35: c7 41 24 00 00 00 00         	mov	dword ptr [ecx + 36], 0
			00000038:  R_386_32	_file_write
      3c: 8d 65 f8                     	lea	esp, [ebp - 8]
      3f: 5b                           	pop	ebx
      40: 5e                           	pop	esi
      41: 5d                           	pop	ebp
      42: e9 fc ff ff ff               	jmp	0x43 <fopen+0x43>
			00000043:  R_386_PC32	.text.fopen_existing_stream

Disassembly of section .text.ftrylockfile:

00000000 <ftrylockfile>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
       6: 8b 50 40                     	mov	edx, dword ptr [eax + 64]
       9: 85 d2                        	test	edx, edx
       b: 74 0c                        	je	0x19 <ftrylockfile+0x19>
       d: 8b 48 44                     	mov	ecx, dword ptr [eax + 68]
      10: ba 01 00 00 00               	mov	edx, 1
      15: 85 c9                        	test	ecx, ecx
      17: 75 0e                        	jne	0x27 <ftrylockfile+0x27>
      19: 8b 50 40                     	mov	edx, dword ptr [eax + 64]
      1c: 42                           	inc	edx
      1d: 89 50 40                     	mov	dword ptr [eax + 64], edx
      20: 31 d2                        	xor	edx, edx
      22: 89 50 44                     	mov	dword ptr [eax + 68], edx
      25: 31 d2                        	xor	edx, edx
      27: 89 d0                        	mov	eax, edx
      29: 5d                           	pop	ebp
      2a: c3                           	ret

Disassembly of section .text.funlockfile:

00000000 <funlockfile>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
       6: 8b 42 40                     	mov	eax, dword ptr [edx + 64]
       9: 48                           	dec	eax
       a: 89 42 40                     	mov	dword ptr [edx + 64], eax
       d: 5d                           	pop	ebp
       e: c3                           	ret

Disassembly of section .text.flockfile:

00000000 <flockfile>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 08                     	sub	esp, 8
       6: 83 ec 0c                     	sub	esp, 12
       9: ff 75 08                     	push	dword ptr [ebp + 8]
       c: e8 fc ff ff ff               	call	0xd <flockfile+0xd>
			0000000d:  R_386_PC32	ftrylockfile
      11: 83 c4 10                     	add	esp, 16
      14: 85 c0                        	test	eax, eax
      16: 75 ee                        	jne	0x6 <flockfile+0x6>
      18: c9                           	leave
      19: c3                           	ret

Disassembly of section .text.feof:

00000000 <feof>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 83 ec 10                     	sub	esp, 16
       7: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       a: 53                           	push	ebx
       b: e8 fc ff ff ff               	call	0xc <feof+0xc>
			0000000c:  R_386_PC32	flockfile
      10: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      13: 0f b6 53 08                  	movzx	edx, byte ptr [ebx + 8]
      17: 48                           	dec	eax
      18: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      1b: 89 d0                        	mov	eax, edx
      1d: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      20: c9                           	leave
      21: c3                           	ret

Disassembly of section .text.ferror:

00000000 <ferror>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 83 ec 10                     	sub	esp, 16
       7: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       a: 53                           	push	ebx
       b: e8 fc ff ff ff               	call	0xc <ferror+0xc>
			0000000c:  R_386_PC32	flockfile
      10: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      13: 0f b6 53 09                  	movzx	edx, byte ptr [ebx + 9]
      17: 48                           	dec	eax
      18: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      1b: 89 d0                        	mov	eax, edx
      1d: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      20: c9                           	leave
      21: c3                           	ret

Disassembly of section .text.clearerr:

00000000 <clearerr>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 83 ec 10                     	sub	esp, 16
       7: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       a: 53                           	push	ebx
       b: e8 fc ff ff ff               	call	0xc <clearerr+0xc>
			0000000c:  R_386_PC32	flockfile
      10: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      13: 66 c7 43 08 00 00            	mov	word ptr [ebx + 8], 0
      19: 83 c4 10                     	add	esp, 16
      1c: 48                           	dec	eax
      1d: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      20: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      23: c9                           	leave
      24: c3                           	ret

Disassembly of section .text.setvbuf:

00000000 <setvbuf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 83 ec 28                     	sub	esp, 40
       9: 8b 7d 08                     	mov	edi, dword ptr [ebp + 8]
       c: 8b 5d 0c                     	mov	ebx, dword ptr [ebp + 12]
       f: 57                           	push	edi
      10: e8 fc ff ff ff               	call	0x11 <setvbuf+0x11>
			00000011:  R_386_PC32	flockfile
      15: 83 c4 10                     	add	esp, 16
      18: 85 ff                        	test	edi, edi
      1a: 74 07                        	je	0x23 <setvbuf+0x23>
      1c: 8b 77 3c                     	mov	esi, dword ptr [edi + 60]
      1f: 85 f6                        	test	esi, esi
      21: 74 17                        	je	0x3a <setvbuf+0x3a>
      23: e8 fc ff ff ff               	call	0x24 <setvbuf+0x24>
			00000024:  R_386_PC32	__thread_local_errno_
      28: 83 ce ff                     	or	esi, -1
      2b: c7 00 14 00 00 00            	mov	dword ptr [eax], 20
      31: 8b 47 40                     	mov	eax, dword ptr [edi + 64]
      34: 48                           	dec	eax
      35: 89 47 40                     	mov	dword ptr [edi + 64], eax
      38: eb 59                        	jmp	0x93 <setvbuf+0x93>
      3a: 80 7f 1c 00                  	cmp	byte ptr [edi + 28], 0
      3e: 74 0e                        	je	0x4e <setvbuf+0x4e>
      40: 83 ec 0c                     	sub	esp, 12
      43: ff 77 10                     	push	dword ptr [edi + 16]
      46: e8 fc ff ff ff               	call	0x47 <setvbuf+0x47>
			00000047:  R_386_PC32	free
      4b: 83 c4 10                     	add	esp, 16
      4e: 85 db                        	test	ebx, ebx
      50: ba 20 00 00 00               	mov	edx, 32
      55: 0f 94 47 1c                  	sete	byte ptr [edi + 28]
      59: 39 55 14                     	cmp	dword ptr [ebp + 20], edx
      5c: 0f 43 55 14                  	cmovae	edx, dword ptr [ebp + 20]
      60: 85 db                        	test	ebx, ebx
      62: 75 17                        	jne	0x7b <setvbuf+0x7b>
      64: 83 ec 0c                     	sub	esp, 12
      67: 8d 42 01                     	lea	eax, [edx + 1]
      6a: 89 55 e4                     	mov	dword ptr [ebp - 28], edx
      6d: 50                           	push	eax
      6e: e8 fc ff ff ff               	call	0x6f <setvbuf+0x6f>
			0000006f:  R_386_PC32	malloc
      73: 8b 55 e4                     	mov	edx, dword ptr [ebp - 28]
      76: 83 c4 10                     	add	esp, 16
      79: 89 c3                        	mov	ebx, eax
      7b: 31 c0                        	xor	eax, eax
      7d: 89 5f 10                     	mov	dword ptr [edi + 16], ebx
      80: 89 47 14                     	mov	dword ptr [edi + 20], eax
      83: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
      86: 89 57 18                     	mov	dword ptr [edi + 24], edx
      89: 89 47 0c                     	mov	dword ptr [edi + 12], eax
      8c: 8b 47 40                     	mov	eax, dword ptr [edi + 64]
      8f: 48                           	dec	eax
      90: 89 47 40                     	mov	dword ptr [edi + 64], eax
      93: 8d 65 f4                     	lea	esp, [ebp - 12]
      96: 89 f0                        	mov	eax, esi
      98: 5b                           	pop	ebx
      99: 5e                           	pop	esi
      9a: 5f                           	pop	edi
      9b: 5d                           	pop	ebp
      9c: c3                           	ret

Disassembly of section .text.setbuffer:

00000000 <setbuffer>:
       0: 55                           	push	ebp
       1: 31 c0                        	xor	eax, eax
       3: 89 e5                        	mov	ebp, esp
       5: 83 ec 08                     	sub	esp, 8
       8: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
       b: ff 75 10                     	push	dword ptr [ebp + 16]
       e: 85 d2                        	test	edx, edx
      10: 0f 94 c0                     	sete	al
      13: 01 c0                        	add	eax, eax
      15: 50                           	push	eax
      16: 52                           	push	edx
      17: ff 75 08                     	push	dword ptr [ebp + 8]
      1a: e8 fc ff ff ff               	call	0x1b <setbuffer+0x1b>
			0000001b:  R_386_PC32	setvbuf
      1f: 83 c4 10                     	add	esp, 16
      22: c9                           	leave
      23: c3                           	ret

Disassembly of section .text.setbuf:

00000000 <setbuf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 0c                     	sub	esp, 12
       6: 68 00 02 00 00               	push	512
       b: ff 75 0c                     	push	dword ptr [ebp + 12]
       e: ff 75 08                     	push	dword ptr [ebp + 8]
      11: e8 fc ff ff ff               	call	0x12 <setbuf+0x12>
			00000012:  R_386_PC32	setbuffer
      16: 83 c4 10                     	add	esp, 16
      19: c9                           	leave
      1a: c3                           	ret

Disassembly of section .text.setlinebuf:

00000000 <setlinebuf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 08                     	sub	esp, 8
       6: 6a 00                        	push	0
       8: 6a 01                        	push	1
       a: 6a 00                        	push	0
       c: ff 75 08                     	push	dword ptr [ebp + 8]
       f: e8 fc ff ff ff               	call	0x10 <setlinebuf+0x10>
			00000010:  R_386_PC32	setvbuf
      14: 83 c4 10                     	add	esp, 16
      17: c9                           	leave
      18: c3                           	ret

Disassembly of section .text.fflush:

00000000 <fflush>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 53                           	push	ebx
       5: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       8: 85 db                        	test	ebx, ebx
       a: 75 0d                        	jne	0x19 <fflush+0x19>
       c: e8 fc ff ff ff               	call	0xd <fflush+0xd>
			0000000d:  R_386_PC32	__thread_local_errno_
      11: c7 00 01 00 00 00            	mov	dword ptr [eax], 1
      17: eb 49                        	jmp	0x62 <fflush+0x62>
      19: 83 ec 0c                     	sub	esp, 12
      1c: 53                           	push	ebx
      1d: e8 fc ff ff ff               	call	0x1e <fflush+0x1e>
			0000001e:  R_386_PC32	flockfile
      22: 8b 43 3c                     	mov	eax, dword ptr [ebx + 60]
      25: 83 c4 10                     	add	esp, 16
      28: 85 c0                        	test	eax, eax
      2a: 74 0a                        	je	0x36 <fflush+0x36>
      2c: 83 f8 01                     	cmp	eax, 1
      2f: 75 10                        	jne	0x41 <fflush+0x41>
      31: 31 c9                        	xor	ecx, ecx
      33: 89 4b 14                     	mov	dword ptr [ebx + 20], ecx
      36: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      39: 48                           	dec	eax
      3a: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      3d: 31 c0                        	xor	eax, eax
      3f: eb 55                        	jmp	0x96 <fflush+0x96>
      41: 83 f8 02                     	cmp	eax, 2
      44: 75 43                        	jne	0x89 <fflush+0x89>
      46: 52                           	push	edx
      47: ff 73 14                     	push	dword ptr [ebx + 20]
      4a: ff 73 10                     	push	dword ptr [ebx + 16]
      4d: 53                           	push	ebx
      4e: ff 53 24                     	call	dword ptr [ebx + 36]
      51: 83 c4 10                     	add	esp, 16
      54: 40                           	inc	eax
      55: 75 10                        	jne	0x67 <fflush+0x67>
      57: c6 43 09 01                  	mov	byte ptr [ebx + 9], 1
      5b: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      5e: 48                           	dec	eax
      5f: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      62: 83 c8 ff                     	or	eax, -1
      65: eb 2f                        	jmp	0x96 <fflush+0x96>
      67: 31 c0                        	xor	eax, eax
      69: 80 7b 48 00                  	cmp	byte ptr [ebx + 72], 0
      6d: 89 43 14                     	mov	dword ptr [ebx + 20], eax
      70: 74 c4                        	je	0x36 <fflush+0x36>
      72: 8b 43 34                     	mov	eax, dword ptr [ebx + 52]
      75: 3b 43 30                     	cmp	eax, dword ptr [ebx + 48]
      78: 73 bc                        	jae	0x36 <fflush+0x36>
      7a: 8b 53 2c                     	mov	edx, dword ptr [ebx + 44]
      7d: 8d 48 01                     	lea	ecx, [eax + 1]
      80: 89 4b 34                     	mov	dword ptr [ebx + 52], ecx
      83: c6 04 02 00                  	mov	byte ptr [edx + eax], 0
      87: eb ad                        	jmp	0x36 <fflush+0x36>
      89: e8 fc ff ff ff               	call	0x8a <fflush+0x8a>
			0000008a:  R_386_PC32	__thread_local_errno_
      8e: c7 00 14 00 00 00            	mov	dword ptr [eax], 20
      94: eb c5                        	jmp	0x5b <fflush+0x5b>
      96: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      99: c9                           	leave
      9a: c3                           	ret

Disassembly of section .text.fclose:

00000000 <fclose>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 83 ec 10                     	sub	esp, 16
       7: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       a: 53                           	push	ebx
       b: e8 fc ff ff ff               	call	0xc <fclose+0xc>
			0000000c:  R_386_PC32	flockfile
      10: 89 1c 24                     	mov	dword ptr [esp], ebx
      13: e8 fc ff ff ff               	call	0x14 <fclose+0x14>
			00000014:  R_386_PC32	fflush
      18: 83 c4 10                     	add	esp, 16
      1b: 80 7b 1c 00                  	cmp	byte ptr [ebx + 28], 0
      1f: 74 0e                        	je	0x2f <fclose+0x2f>
      21: 83 ec 0c                     	sub	esp, 12
      24: ff 73 10                     	push	dword ptr [ebx + 16]
      27: e8 fc ff ff ff               	call	0x28 <fclose+0x28>
			00000028:  R_386_PC32	free
      2c: 83 c4 10                     	add	esp, 16
      2f: 80 7b 48 00                  	cmp	byte ptr [ebx + 72], 0
      33: 75 18                        	jne	0x4d <fclose+0x4d>
      35: 83 ec 0c                     	sub	esp, 12
      38: ff 33                        	push	dword ptr [ebx]
      3a: e8 fc ff ff ff               	call	0x3b <fclose+0x3b>
			0000003b:  R_386_PC32	close
      3f: 83 c4 10                     	add	esp, 16
      42: 89 c2                        	mov	edx, eax
      44: 83 c8 ff                     	or	eax, -1
      47: 85 d2                        	test	edx, edx
      49: 74 16                        	je	0x61 <fclose+0x61>
      4b: eb 22                        	jmp	0x6f <fclose+0x6f>
      4d: 80 7b 38 00                  	cmp	byte ptr [ebx + 56], 0
      51: 74 0e                        	je	0x61 <fclose+0x61>
      53: 83 ec 0c                     	sub	esp, 12
      56: ff 73 2c                     	push	dword ptr [ebx + 44]
      59: e8 fc ff ff ff               	call	0x5a <fclose+0x5a>
			0000005a:  R_386_PC32	free
      5e: 83 c4 10                     	add	esp, 16
      61: 83 ec 0c                     	sub	esp, 12
      64: 53                           	push	ebx
      65: e8 fc ff ff ff               	call	0x66 <fclose+0x66>
			00000066:  R_386_PC32	free
      6a: 83 c4 10                     	add	esp, 16
      6d: 31 c0                        	xor	eax, eax
      6f: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      72: c9                           	leave
      73: c3                           	ret

Disassembly of section .text.freopen:

00000000 <freopen>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 83 ec 10                     	sub	esp, 16
       7: 8b 5d 10                     	mov	ebx, dword ptr [ebp + 16]
       a: 53                           	push	ebx
       b: e8 fc ff ff ff               	call	0xc <freopen+0xc>
			0000000c:  R_386_PC32	flockfile
      10: 89 1c 24                     	mov	dword ptr [esp], ebx
      13: e8 fc ff ff ff               	call	0x14 <freopen+0x14>
			00000014:  R_386_PC32	fclose
      18: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
      1b: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      1e: 89 d9                        	mov	ecx, ebx
      20: e8 fc ff ff ff               	call	0x21 <freopen+0x21>
			00000021:  R_386_PC32	.text.fopen_existing_stream
      25: 8b 53 40                     	mov	edx, dword ptr [ebx + 64]
      28: c6 43 48 00                  	mov	byte ptr [ebx + 72], 0
      2c: 4a                           	dec	edx
      2d: 89 53 40                     	mov	dword ptr [ebx + 64], edx
      30: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      33: c9                           	leave
      34: c3                           	ret

Disassembly of section .text.ungetc:

00000000 <ungetc>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8b 5d 0c                     	mov	ebx, dword ptr [ebp + 12]
       8: 8b 75 08                     	mov	esi, dword ptr [ebp + 8]
       b: 83 ec 0c                     	sub	esp, 12
       e: 53                           	push	ebx
       f: e8 fc ff ff ff               	call	0x10 <ungetc+0x10>
			00000010:  R_386_PC32	flockfile
      14: 83 c4 10                     	add	esp, 16
      17: 83 fe ff                     	cmp	esi, -1
      1a: 74 12                        	je	0x2e <ungetc+0x2e>
      1c: 83 7b 04 ff                  	cmp	dword ptr [ebx + 4], -1
      20: 75 0c                        	jne	0x2e <ungetc+0x2e>
      22: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      25: 89 73 04                     	mov	dword ptr [ebx + 4], esi
      28: 48                           	dec	eax
      29: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      2c: eb 0a                        	jmp	0x38 <ungetc+0x38>
      2e: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      31: 83 ce ff                     	or	esi, -1
      34: 48                           	dec	eax
      35: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      38: 8d 65 f8                     	lea	esp, [ebp - 8]
      3b: 89 f0                        	mov	eax, esi
      3d: 5b                           	pop	ebx
      3e: 5e                           	pop	esi
      3f: 5d                           	pop	ebp
      40: c3                           	ret

Disassembly of section .text.fputc:

00000000 <fputc>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 83 ec 1c                     	sub	esp, 28
       8: 8b 5d 0c                     	mov	ebx, dword ptr [ebp + 12]
       b: 8b 75 08                     	mov	esi, dword ptr [ebp + 8]
       e: 53                           	push	ebx
       f: e8 fc ff ff ff               	call	0x10 <fputc+0x10>
			00000010:  R_386_PC32	flockfile
      14: 89 f0                        	mov	eax, esi
      16: c7 43 3c 02 00 00 00         	mov	dword ptr [ebx + 60], 2
      1d: 83 c4 10                     	add	esp, 16
      20: 88 45 f7                     	mov	byte ptr [ebp - 9], al
      23: 8b 43 0c                     	mov	eax, dword ptr [ebx + 12]
      26: 83 f8 02                     	cmp	eax, 2
      29: 75 17                        	jne	0x42 <fputc+0x42>
      2b: 8d 45 f7                     	lea	eax, [ebp - 9]
      2e: 51                           	push	ecx
      2f: 6a 01                        	push	1
      31: 50                           	push	eax
      32: 53                           	push	ebx
      33: ff 53 24                     	call	dword ptr [ebx + 36]
      36: 83 c4 10                     	add	esp, 16
      39: 40                           	inc	eax
      3a: 0f 85 a6 00 00 00            	jne	0xe6 <fputc+0xe6>
      40: eb 2c                        	jmp	0x6e <fputc+0x6e>
      42: 83 f8 01                     	cmp	eax, 1
      45: 75 5d                        	jne	0xa4 <fputc+0xa4>
      47: 8b 43 14                     	mov	eax, dword ptr [ebx + 20]
      4a: 3b 43 18                     	cmp	eax, dword ptr [ebx + 24]
      4d: 73 10                        	jae	0x5f <fputc+0x5f>
      4f: 8d 48 01                     	lea	ecx, [eax + 1]
      52: 8b 53 10                     	mov	edx, dword ptr [ebx + 16]
      55: 89 4b 14                     	mov	dword ptr [ebx + 20], ecx
      58: 89 f1                        	mov	ecx, esi
      5a: 88 0c 02                     	mov	byte ptr [edx + eax], cl
      5d: eb 2e                        	jmp	0x8d <fputc+0x8d>
      5f: 83 ec 0c                     	sub	esp, 12
      62: 53                           	push	ebx
      63: e8 fc ff ff ff               	call	0x64 <fputc+0x64>
			00000064:  R_386_PC32	fflush
      68: 83 c4 10                     	add	esp, 16
      6b: 40                           	inc	eax
      6c: 75 10                        	jne	0x7e <fputc+0x7e>
      6e: c6 43 09 01                  	mov	byte ptr [ebx + 9], 1
      72: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      75: 83 ce ff                     	or	esi, -1
      78: 48                           	dec	eax
      79: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      7c: eb 6f                        	jmp	0xed <fputc+0xed>
      7e: 52                           	push	edx
      7f: 52                           	push	edx
      80: 53                           	push	ebx
      81: 56                           	push	esi
      82: e8 fc ff ff ff               	call	0x83 <fputc+0x83>
			00000083:  R_386_PC32	fputc
      87: 83 c4 10                     	add	esp, 16
      8a: 40                           	inc	eax
      8b: 74 e5                        	je	0x72 <fputc+0x72>
      8d: 80 7d f7 0a                  	cmp	byte ptr [ebp - 9], 10
      91: 75 53                        	jne	0xe6 <fputc+0xe6>
      93: 83 ec 0c                     	sub	esp, 12
      96: 53                           	push	ebx
      97: e8 fc ff ff ff               	call	0x98 <fputc+0x98>
			00000098:  R_386_PC32	fflush
      9c: 83 c4 10                     	add	esp, 16
      9f: 40                           	inc	eax
      a0: 75 44                        	jne	0xe6 <fputc+0xe6>
      a2: eb ce                        	jmp	0x72 <fputc+0x72>
      a4: 85 c0                        	test	eax, eax
      a6: 75 3e                        	jne	0xe6 <fputc+0xe6>
      a8: 8b 43 14                     	mov	eax, dword ptr [ebx + 20]
      ab: 3b 43 18                     	cmp	eax, dword ptr [ebx + 24]
      ae: 73 10                        	jae	0xc0 <fputc+0xc0>
      b0: 8d 48 01                     	lea	ecx, [eax + 1]
      b3: 8b 53 10                     	mov	edx, dword ptr [ebx + 16]
      b6: 89 4b 14                     	mov	dword ptr [ebx + 20], ecx
      b9: 89 f1                        	mov	ecx, esi
      bb: 88 0c 02                     	mov	byte ptr [edx + eax], cl
      be: eb 26                        	jmp	0xe6 <fputc+0xe6>
      c0: 83 ec 0c                     	sub	esp, 12
      c3: 53                           	push	ebx
      c4: e8 fc ff ff ff               	call	0xc5 <fputc+0xc5>
			000000c5:  R_386_PC32	fflush
      c9: 83 c4 10                     	add	esp, 16
      cc: 40                           	inc	eax
      cd: 74 a3                        	je	0x72 <fputc+0x72>
      cf: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      d2: 48                           	dec	eax
      d3: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      d6: 50                           	push	eax
      d7: 50                           	push	eax
      d8: 53                           	push	ebx
      d9: 56                           	push	esi
      da: e8 fc ff ff ff               	call	0xdb <fputc+0xdb>
			000000db:  R_386_PC32	fputc
      df: 83 c4 10                     	add	esp, 16
      e2: 89 c6                        	mov	esi, eax
      e4: eb 07                        	jmp	0xed <fputc+0xed>
      e6: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      e9: 48                           	dec	eax
      ea: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      ed: 8d 65 f8                     	lea	esp, [ebp - 8]
      f0: 89 f0                        	mov	eax, esi
      f2: 5b                           	pop	ebx
      f3: 5e                           	pop	esi
      f4: 5d                           	pop	ebp
      f5: c3                           	ret

Disassembly of section .text.putc:

00000000 <putc>:
       0: e9 fc ff ff ff               	jmp	0x1 <putc+0x1>
			00000001:  R_386_PC32	fputc

Disassembly of section .text.putchar:

00000000 <putchar>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 10                     	sub	esp, 16
       6: ff 35 00 00 00 00            	push	dword ptr [0]
			00000008:  R_386_32	stdout
       c: ff 75 08                     	push	dword ptr [ebp + 8]
       f: e8 fc ff ff ff               	call	0x10 <putchar+0x10>
			00000010:  R_386_PC32	fputc
      14: c9                           	leave
      15: c3                           	ret

Disassembly of section .text.fgetc:

00000000 <fgetc>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       8: 83 ec 0c                     	sub	esp, 12
       b: 53                           	push	ebx
       c: e8 fc ff ff ff               	call	0xd <fgetc+0xd>
			0000000d:  R_386_PC32	flockfile
      11: 8b 73 04                     	mov	esi, dword ptr [ebx + 4]
      14: c6 43 08 00                  	mov	byte ptr [ebx + 8], 0
      18: 83 c4 10                     	add	esp, 16
      1b: c7 43 3c 01 00 00 00         	mov	dword ptr [ebx + 60], 1
      22: 83 fe ff                     	cmp	esi, -1
      25: 74 09                        	je	0x30 <fgetc+0x30>
      27: c7 43 04 ff ff ff ff         	mov	dword ptr [ebx + 4], 4294967295
      2e: eb 38                        	jmp	0x68 <fgetc+0x68>
      30: 83 7b 14 00                  	cmp	dword ptr [ebx + 20], 0
      34: 75 3b                        	jne	0x71 <fgetc+0x71>
      36: 83 7b 0c 02                  	cmp	dword ptr [ebx + 12], 2
      3a: 8b 53 20                     	mov	edx, dword ptr [ebx + 32]
      3d: b8 01 00 00 00               	mov	eax, 1
      42: 74 03                        	je	0x47 <fgetc+0x47>
      44: 8b 43 18                     	mov	eax, dword ptr [ebx + 24]
      47: 51                           	push	ecx
      48: 50                           	push	eax
      49: ff 73 10                     	push	dword ptr [ebx + 16]
      4c: 53                           	push	ebx
      4d: ff d2                        	call	edx
      4f: 83 c4 10                     	add	esp, 16
      52: 83 f8 ff                     	cmp	eax, -1
      55: 75 06                        	jne	0x5d <fgetc+0x5d>
      57: c6 43 09 01                  	mov	byte ptr [ebx + 9], 1
      5b: eb 0b                        	jmp	0x68 <fgetc+0x68>
      5d: 89 43 14                     	mov	dword ptr [ebx + 20], eax
      60: 85 c0                        	test	eax, eax
      62: 75 0d                        	jne	0x71 <fgetc+0x71>
      64: c6 43 08 01                  	mov	byte ptr [ebx + 8], 1
      68: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      6b: 48                           	dec	eax
      6c: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      6f: eb 23                        	jmp	0x94 <fgetc+0x94>
      71: 8b 43 14                     	mov	eax, dword ptr [ebx + 20]
      74: 8b 53 10                     	mov	edx, dword ptr [ebx + 16]
      77: 48                           	dec	eax
      78: 0f be 32                     	movsx	esi, byte ptr [edx]
      7b: 89 43 14                     	mov	dword ptr [ebx + 20], eax
      7e: 51                           	push	ecx
      7f: 50                           	push	eax
      80: 8d 42 01                     	lea	eax, [edx + 1]
      83: 50                           	push	eax
      84: 52                           	push	edx
      85: e8 fc ff ff ff               	call	0x86 <fgetc+0x86>
			00000086:  R_386_PC32	memmove
      8a: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      8d: 83 c4 10                     	add	esp, 16
      90: 48                           	dec	eax
      91: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      94: 8d 65 f8                     	lea	esp, [ebp - 8]
      97: 89 f0                        	mov	eax, esi
      99: 5b                           	pop	ebx
      9a: 5e                           	pop	esi
      9b: 5d                           	pop	ebp
      9c: c3                           	ret

Disassembly of section .text.fgets:

00000000 <fgets>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 31 ff                        	xor	edi, edi
       6: 56                           	push	esi
       7: 53                           	push	ebx
       8: 83 ec 0c                     	sub	esp, 12
       b: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       e: 8b 75 10                     	mov	esi, dword ptr [ebp + 16]
      11: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
      14: 48                           	dec	eax
      15: 39 f8                        	cmp	eax, edi
      17: 7e 37                        	jle	0x50 <fgets+0x50>
      19: 83 ec 0c                     	sub	esp, 12
      1c: 56                           	push	esi
      1d: e8 fc ff ff ff               	call	0x1e <fgets+0x1e>
			0000001e:  R_386_PC32	fgetc
      22: c6 44 3b 01 00               	mov	byte ptr [ebx + edi + 1], 0
      27: 83 c4 10                     	add	esp, 16
      2a: 88 04 3b                     	mov	byte ptr [ebx + edi], al
      2d: 80 7e 09 00                  	cmp	byte ptr [esi + 9], 0
      31: 74 04                        	je	0x37 <fgets+0x37>
      33: 31 db                        	xor	ebx, ebx
      35: eb 19                        	jmp	0x50 <fgets+0x50>
      37: 83 ec 0c                     	sub	esp, 12
      3a: 56                           	push	esi
      3b: e8 fc ff ff ff               	call	0x3c <fgets+0x3c>
			0000003c:  R_386_PC32	feof
      40: 83 c4 10                     	add	esp, 16
      43: 85 c0                        	test	eax, eax
      45: 75 ec                        	jne	0x33 <fgets+0x33>
      47: 80 3c 3b 0a                  	cmp	byte ptr [ebx + edi], 10
      4b: 74 03                        	je	0x50 <fgets+0x50>
      4d: 47                           	inc	edi
      4e: eb c1                        	jmp	0x11 <fgets+0x11>
      50: 8d 65 f4                     	lea	esp, [ebp - 12]
      53: 89 d8                        	mov	eax, ebx
      55: 5b                           	pop	ebx
      56: 5e                           	pop	esi
      57: 5f                           	pop	edi
      58: 5d                           	pop	ebp
      59: c3                           	ret

Disassembly of section .text.getc:

00000000 <getc>:
       0: e9 fc ff ff ff               	jmp	0x1 <getc+0x1>
			00000001:  R_386_PC32	fgetc

Disassembly of section .text.getchar:

00000000 <getchar>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 14                     	sub	esp, 20
       6: ff 35 00 00 00 00            	push	dword ptr [0]
			00000008:  R_386_32	stdin
       c: e8 fc ff ff ff               	call	0xd <getchar+0xd>
			0000000d:  R_386_PC32	fgetc
      11: c9                           	leave
      12: c3                           	ret

Disassembly of section .text.fputs:

00000000 <fputs>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 53                           	push	ebx
       5: 8b 5d 0c                     	mov	ebx, dword ptr [ebp + 12]
       8: 83 ec 0c                     	sub	esp, 12
       b: 53                           	push	ebx
       c: e8 fc ff ff ff               	call	0xd <fputs+0xd>
			0000000d:  R_386_PC32	flockfile
      11: 8b 75 08                     	mov	esi, dword ptr [ebp + 8]
      14: 83 c4 10                     	add	esp, 16
      17: 0f be 06                     	movsx	eax, byte ptr [esi]
      1a: 84 c0                        	test	al, al
      1c: 74 1b                        	je	0x39 <fputs+0x39>
      1e: 52                           	push	edx
      1f: 46                           	inc	esi
      20: 52                           	push	edx
      21: 53                           	push	ebx
      22: 50                           	push	eax
      23: e8 fc ff ff ff               	call	0x24 <fputs+0x24>
			00000024:  R_386_PC32	fputc
      28: 83 c4 10                     	add	esp, 16
      2b: 83 f8 ff                     	cmp	eax, -1
      2e: 75 e7                        	jne	0x17 <fputs+0x17>
      30: 8b 53 40                     	mov	edx, dword ptr [ebx + 64]
      33: 4a                           	dec	edx
      34: 89 53 40                     	mov	dword ptr [ebx + 64], edx
      37: eb 09                        	jmp	0x42 <fputs+0x42>
      39: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      3c: 48                           	dec	eax
      3d: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      40: 31 c0                        	xor	eax, eax
      42: 8d 65 f8                     	lea	esp, [ebp - 8]
      45: 5b                           	pop	ebx
      46: 5e                           	pop	esi
      47: 5d                           	pop	ebp
      48: c3                           	ret

Disassembly of section .text.puts:

00000000 <puts>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 10                     	sub	esp, 16
       6: ff 35 00 00 00 00            	push	dword ptr [0]
			00000008:  R_386_32	stdout
       c: ff 75 08                     	push	dword ptr [ebp + 8]
       f: e8 fc ff ff ff               	call	0x10 <puts+0x10>
			00000010:  R_386_PC32	fputs
      14: 83 c4 10                     	add	esp, 16
      17: 89 c2                        	mov	edx, eax
      19: 83 c8 ff                     	or	eax, -1
      1c: 85 d2                        	test	edx, edx
      1e: 78 12                        	js	0x32 <puts+0x32>
      20: 50                           	push	eax
      21: 50                           	push	eax
      22: ff 35 00 00 00 00            	push	dword ptr [0]
			00000024:  R_386_32	stdout
      28: 6a 0a                        	push	10
      2a: e8 fc ff ff ff               	call	0x2b <puts+0x2b>
			0000002b:  R_386_PC32	fputc
      2f: 83 c4 10                     	add	esp, 16
      32: c9                           	leave
      33: c3                           	ret

Disassembly of section .text.fileno:

00000000 <fileno>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 83 ec 10                     	sub	esp, 16
       7: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       a: 53                           	push	ebx
       b: e8 fc ff ff ff               	call	0xc <fileno+0xc>
			0000000c:  R_386_PC32	flockfile
      10: 83 c4 10                     	add	esp, 16
      13: 80 7b 48 00                  	cmp	byte ptr [ebx + 72], 0
      17: 74 17                        	je	0x30 <fileno+0x30>
      19: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      1c: 48                           	dec	eax
      1d: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      20: e8 fc ff ff ff               	call	0x21 <fileno+0x21>
			00000021:  R_386_PC32	__thread_local_errno_
      25: 83 ca ff                     	or	edx, -1
      28: c7 00 14 00 00 00            	mov	dword ptr [eax], 20
      2e: eb 09                        	jmp	0x39 <fileno+0x39>
      30: 8b 43 40                     	mov	eax, dword ptr [ebx + 64]
      33: 8b 13                        	mov	edx, dword ptr [ebx]
      35: 48                           	dec	eax
      36: 89 43 40                     	mov	dword ptr [ebx + 64], eax
      39: 8b 5d fc                     	mov	ebx, dword ptr [ebp - 4]
      3c: 89 d0                        	mov	eax, edx
      3e: c9                           	leave
      3f: c3                           	ret

Disassembly of section .text.vfprintf:

00000000 <vfprintf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 81 ec b8 00 00 00            	sub	esp, 184
       c: 8b 5d 10                     	mov	ebx, dword ptr [ebp + 16]
       f: ff 75 08                     	push	dword ptr [ebp + 8]
      12: e8 fc ff ff ff               	call	0x13 <vfprintf+0x13>
			00000013:  R_386_PC32	flockfile
      17: 31 c9                        	xor	ecx, ecx
      19: 83 c4 10                     	add	esp, 16
      1c: 89 8d 74 ff ff ff            	mov	dword ptr [ebp - 140], ecx
      22: 89 8d 7c ff ff ff            	mov	dword ptr [ebp - 132], ecx
      28: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
      2b: 8b b5 74 ff ff ff            	mov	esi, dword ptr [ebp - 140]
      31: 0f be 04 30                  	movsx	eax, byte ptr [eax + esi]
      35: 84 c0                        	test	al, al
      37: 0f 84 09 07 00 00            	je	0x746 <vfprintf+0x746>
      3d: 3c 25                        	cmp	al, 37
      3f: 75 27                        	jne	0x68 <vfprintf+0x68>
      41: 8b 8d 74 ff ff ff            	mov	ecx, dword ptr [ebp - 140]
      47: c6 85 58 ff ff ff 00         	mov	byte ptr [ebp - 168], 0
      4e: 31 f6                        	xor	esi, esi
      50: c6 85 64 ff ff ff 00         	mov	byte ptr [ebp - 156], 0
      57: c6 85 70 ff ff ff 00         	mov	byte ptr [ebp - 144], 0
      5e: 41                           	inc	ecx
      5f: c6 85 68 ff ff ff 00         	mov	byte ptr [ebp - 152], 0
      66: eb 44                        	jmp	0xac <vfprintf+0xac>
      68: 52                           	push	edx
      69: 52                           	push	edx
      6a: ff 75 08                     	push	dword ptr [ebp + 8]
      6d: 50                           	push	eax
      6e: e9 2f 02 00 00               	jmp	0x2a2 <vfprintf+0x2a2>
      73: bf 09 28 01 00               	mov	edi, 75785
      78: 0f a3 d7                     	bt	edi, edx
      7b: 0f 92 c2                     	setb	dl
      7e: 84 d2                        	test	dl, dl
      80: 74 59                        	je	0xdb <vfprintf+0xdb>
      82: 3c 23                        	cmp	al, 35
      84: 0f 84 85 04 00 00            	je	0x50f <vfprintf+0x50f>
      8a: 3c 30                        	cmp	al, 48
      8c: 0f 84 71 04 00 00            	je	0x503 <vfprintf+0x503>
      92: 3c 2d                        	cmp	al, 45
      94: 74 39                        	je	0xcf <vfprintf+0xcf>
      96: 3c 20                        	cmp	al, 32
      98: 74 3d                        	je	0xd7 <vfprintf+0xd7>
      9a: 3c 2b                        	cmp	al, 43
      9c: 8a 85 58 ff ff ff            	mov	al, byte ptr [ebp - 168]
      a2: 0f 44 c2                     	cmove	eax, edx
      a5: 88 85 58 ff ff ff            	mov	byte ptr [ebp - 168], al
      ab: 41                           	inc	ecx
      ac: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
      af: 0f be 04 08                  	movsx	eax, byte ptr [eax + ecx]
      b3: 8d 50 e0                     	lea	edx, [eax - 32]
      b6: 80 fa 10                     	cmp	dl, 16
      b9: 76 b8                        	jbe	0x73 <vfprintf+0x73>
      bb: 8d 50 cf                     	lea	edx, [eax - 49]
      be: 80 fa 08                     	cmp	dl, 8
      c1: 76 47                        	jbe	0x10a <vfprintf+0x10a>
      c3: c7 85 6c ff ff ff ff ff ff ff	mov	dword ptr [ebp - 148], 4294967295
      cd: eb 70                        	jmp	0x13f <vfprintf+0x13f>
      cf: 88 95 64 ff ff ff            	mov	byte ptr [ebp - 156], dl
      d5: eb d4                        	jmp	0xab <vfprintf+0xab>
      d7: 89 d6                        	mov	esi, edx
      d9: eb d0                        	jmp	0xab <vfprintf+0xab>
      db: c7 85 6c ff ff ff ff ff ff ff	mov	dword ptr [ebp - 148], 4294967295
      e5: 3c 2a                        	cmp	al, 42
      e7: 75 56                        	jne	0x13f <vfprintf+0x13f>
      e9: 8b 3b                        	mov	edi, dword ptr [ebx]
      eb: 8d 43 04                     	lea	eax, [ebx + 4]
      ee: 89 bd 6c ff ff ff            	mov	dword ptr [ebp - 148], edi
      f4: 85 ff                        	test	edi, edi
      f6: 79 0d                        	jns	0x105 <vfprintf+0x105>
      f8: f7 9d 6c ff ff ff            	neg	dword ptr [ebp - 148]
      fe: c6 85 64 ff ff ff 01         	mov	byte ptr [ebp - 156], 1
     105: 41                           	inc	ecx
     106: 89 c3                        	mov	ebx, eax
     108: eb 35                        	jmp	0x13f <vfprintf+0x13f>
     10a: 83 e8 30                     	sub	eax, 48
     10d: 41                           	inc	ecx
     10e: 89 85 6c ff ff ff            	mov	dword ptr [ebp - 148], eax
     114: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
     117: 8d 79 01                     	lea	edi, [ecx + 1]
     11a: 89 7d 8c                     	mov	dword ptr [ebp - 116], edi
     11d: 0f be 04 08                  	movsx	eax, byte ptr [eax + ecx]
     121: 8d 50 d0                     	lea	edx, [eax - 48]
     124: 80 fa 09                     	cmp	dl, 9
     127: 77 16                        	ja	0x13f <vfprintf+0x13f>
     129: 6b 95 6c ff ff ff 0a         	imul	edx, dword ptr [ebp - 148], 10
     130: 8b 4d 8c                     	mov	ecx, dword ptr [ebp - 116]
     133: 8d 44 02 d0                  	lea	eax, [edx + eax - 48]
     137: 89 85 6c ff ff ff            	mov	dword ptr [ebp - 148], eax
     13d: eb d5                        	jmp	0x114 <vfprintf+0x114>
     13f: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
     142: c7 45 88 ff ff ff ff         	mov	dword ptr [ebp - 120], 4294967295
     149: 80 3c 08 2e                  	cmp	byte ptr [eax + ecx], 46
     14d: 75 48                        	jne	0x197 <vfprintf+0x197>
     14f: 80 7c 08 01 2a               	cmp	byte ptr [eax + ecx + 1], 42
     154: 8d 51 01                     	lea	edx, [ecx + 1]
     157: 75 0a                        	jne	0x163 <vfprintf+0x163>
     159: 8b 03                        	mov	eax, dword ptr [ebx]
     15b: 8d 51 02                     	lea	edx, [ecx + 2]
     15e: 83 c3 04                     	add	ebx, 4
     161: eb 25                        	jmp	0x188 <vfprintf+0x188>
     163: 31 c0                        	xor	eax, eax
     165: 8b 7d 0c                     	mov	edi, dword ptr [ebp + 12]
     168: 8a 0c 17                     	mov	cl, byte ptr [edi + edx]
     16b: 8d 7a 01                     	lea	edi, [edx + 1]
     16e: 88 4d 8c                     	mov	byte ptr [ebp - 116], cl
     171: 83 e9 30                     	sub	ecx, 48
     174: 80 f9 09                     	cmp	cl, 9
     177: 77 0f                        	ja	0x188 <vfprintf+0x188>
     179: 6b c0 0a                     	imul	eax, eax, 10
     17c: 0f be 4d 8c                  	movsx	ecx, byte ptr [ebp - 116]
     180: 89 fa                        	mov	edx, edi
     182: 8d 44 08 d0                  	lea	eax, [eax + ecx - 48]
     186: eb dd                        	jmp	0x165 <vfprintf+0x165>
     188: 85 c0                        	test	eax, eax
     18a: b9 ff ff ff ff               	mov	ecx, 4294967295
     18f: 0f 49 c8                     	cmovns	ecx, eax
     192: 89 4d 88                     	mov	dword ptr [ebp - 120], ecx
     195: 89 d1                        	mov	ecx, edx
     197: 80 bd 70 ff ff ff 00         	cmp	byte ptr [ebp - 144], 0
     19e: 74 18                        	je	0x1b8 <vfprintf+0x1b8>
     1a0: 8a 95 70 ff ff ff            	mov	dl, byte ptr [ebp - 144]
     1a6: 31 c0                        	xor	eax, eax
     1a8: 80 bd 64 ff ff ff 00         	cmp	byte ptr [ebp - 156], 0
     1af: 0f 45 d0                     	cmovne	edx, eax
     1b2: 88 95 70 ff ff ff            	mov	byte ptr [ebp - 144], dl
     1b8: 89 f0                        	mov	eax, esi
     1ba: 84 c0                        	test	al, al
     1bc: 74 0d                        	je	0x1cb <vfprintf+0x1cb>
     1be: 8a 85 58 ff ff ff            	mov	al, byte ptr [ebp - 168]
     1c4: 84 c0                        	test	al, al
     1c6: b0 00                        	mov	al, 0
     1c8: 0f 45 f0                     	cmovne	esi, eax
     1cb: 8a 95 70 ff ff ff            	mov	dl, byte ptr [ebp - 144]
     1d1: 31 c0                        	xor	eax, eax
     1d3: 8d 79 01                     	lea	edi, [ecx + 1]
     1d6: 83 7d 88 ff                  	cmp	dword ptr [ebp - 120], -1
     1da: 89 bd 74 ff ff ff            	mov	dword ptr [ebp - 140], edi
     1e0: 0f 45 d0                     	cmovne	edx, eax
     1e3: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
     1e6: 8a 04 08                     	mov	al, byte ptr [eax + ecx]
     1e9: 88 95 70 ff ff ff            	mov	byte ptr [ebp - 144], dl
     1ef: 3c 74                        	cmp	al, 116
     1f1: 7f 2d                        	jg	0x220 <vfprintf+0x220>
     1f3: 3c 67                        	cmp	al, 103
     1f5: 7f 0c                        	jg	0x203 <vfprintf+0x203>
     1f7: 3c 4c                        	cmp	al, 76
     1f9: 74 57                        	je	0x252 <vfprintf+0x252>
     1fb: 3c 5a                        	cmp	al, 90
     1fd: 75 4b                        	jne	0x24a <vfprintf+0x24a>
     1ff: b0 7a                        	mov	al, 122
     201: eb 4f                        	jmp	0x252 <vfprintf+0x252>
     203: 8b 95 74 ff ff ff            	mov	edx, dword ptr [ebp - 140]
     209: 03 55 0c                     	add	edx, dword ptr [ebp + 12]
     20c: 89 d7                        	mov	edi, edx
     20e: 8d 50 98                     	lea	edx, [eax - 104]
     211: 80 fa 0c                     	cmp	dl, 12
     214: 77 34                        	ja	0x24a <vfprintf+0x24a>
     216: 0f b6 d2                     	movzx	edx, dl
     219: ff 24 95 00 00 00 00         	jmp	dword ptr [4*edx]
			0000021c:  R_386_32	.rodata.vfprintf
     220: 3c 7a                        	cmp	al, 122
     222: 75 26                        	jne	0x24a <vfprintf+0x24a>
     224: eb 2c                        	jmp	0x252 <vfprintf+0x252>
     226: 80 3f 68                     	cmp	byte ptr [edi], 104
     229: 75 27                        	jne	0x252 <vfprintf+0x252>
     22b: 8d 41 02                     	lea	eax, [ecx + 2]
     22e: 89 85 74 ff ff ff            	mov	dword ptr [ebp - 140], eax
     234: b0 48                        	mov	al, 72
     236: eb 1a                        	jmp	0x252 <vfprintf+0x252>
     238: 80 3f 6c                     	cmp	byte ptr [edi], 108
     23b: 75 15                        	jne	0x252 <vfprintf+0x252>
     23d: 8d 41 02                     	lea	eax, [ecx + 2]
     240: 89 85 74 ff ff ff            	mov	dword ptr [ebp - 140], eax
     246: b0 71                        	mov	al, 113
     248: eb 08                        	jmp	0x252 <vfprintf+0x252>
     24a: 89 8d 74 ff ff ff            	mov	dword ptr [ebp - 140], ecx
     250: 31 c0                        	xor	eax, eax
     252: 8b 7d 0c                     	mov	edi, dword ptr [ebp + 12]
     255: 8b 8d 74 ff ff ff            	mov	ecx, dword ptr [ebp - 140]
     25b: 8a 0c 0f                     	mov	cl, byte ptr [edi + ecx]
     25e: 88 4d 8c                     	mov	byte ptr [ebp - 116], cl
     261: 80 f9 78                     	cmp	cl, 120
     264: 0f 8f ba 02 00 00            	jg	0x524 <vfprintf+0x524>
     26a: 80 f9 62                     	cmp	cl, 98
     26d: 7f 13                        	jg	0x282 <vfprintf+0x282>
     26f: 80 f9 25                     	cmp	cl, 37
     272: 74 27                        	je	0x29b <vfprintf+0x29b>
     274: 80 f9 58                     	cmp	cl, 88
     277: 0f 84 be 02 00 00            	je	0x53b <vfprintf+0x53b>
     27d: e9 a2 02 00 00               	jmp	0x524 <vfprintf+0x524>
     282: 8b 7d 8c                     	mov	edi, dword ptr [ebp - 116]
     285: 8d 57 9d                     	lea	edx, [edi - 99]
     288: 80 fa 15                     	cmp	dl, 21
     28b: 0f 87 9a 00 00 00            	ja	0x32b <vfprintf+0x32b>
     291: 0f b6 d2                     	movzx	edx, dl
     294: ff 24 95 34 00 00 00         	jmp	dword ptr [4*edx + 52]
			00000297:  R_386_32	.rodata.vfprintf
     29b: 50                           	push	eax
     29c: 50                           	push	eax
     29d: ff 75 08                     	push	dword ptr [ebp + 8]
     2a0: 6a 25                        	push	37
     2a2: e8 fc ff ff ff               	call	0x2a3 <vfprintf+0x2a3>
			000002a3:  R_386_PC32	fputc
     2a7: ff 85 7c ff ff ff            	inc	dword ptr [ebp - 132]
     2ad: 83 c4 10                     	add	esp, 16
     2b0: e9 43 02 00 00               	jmp	0x4f8 <vfprintf+0x4f8>
     2b5: 8b 13                        	mov	edx, dword ptr [ebx]
     2b7: 3c 74                        	cmp	al, 116
     2b9: 7f 44                        	jg	0x2ff <vfprintf+0x2ff>
     2bb: 3c 67                        	cmp	al, 103
     2bd: 7f 0e                        	jg	0x2cd <vfprintf+0x2cd>
     2bf: 3c 48                        	cmp	al, 72
     2c1: 75 3c                        	jne	0x2ff <vfprintf+0x2ff>
     2c3: 8a 85 7c ff ff ff            	mov	al, byte ptr [ebp - 132]
     2c9: 88 02                        	mov	byte ptr [edx], al
     2cb: eb 1a                        	jmp	0x2e7 <vfprintf+0x2e7>
     2cd: 83 e8 68                     	sub	eax, 104
     2d0: 3c 0c                        	cmp	al, 12
     2d2: 77 2b                        	ja	0x2ff <vfprintf+0x2ff>
     2d4: 0f b6 c0                     	movzx	eax, al
     2d7: ff 24 85 8c 00 00 00         	jmp	dword ptr [4*eax + 140]
			000002da:  R_386_32	.rodata.vfprintf
     2de: 8b 85 7c ff ff ff            	mov	eax, dword ptr [ebp - 132]
     2e4: 66 89 02                     	mov	word ptr [edx], ax
     2e7: 83 c3 04                     	add	ebx, 4
     2ea: e9 09 02 00 00               	jmp	0x4f8 <vfprintf+0x4f8>
     2ef: 8b 85 7c ff ff ff            	mov	eax, dword ptr [ebp - 132]
     2f5: 89 02                        	mov	dword ptr [edx], eax
     2f7: c1 f8 1f                     	sar	eax, 31
     2fa: 89 42 04                     	mov	dword ptr [edx + 4], eax
     2fd: eb e8                        	jmp	0x2e7 <vfprintf+0x2e7>
     2ff: 8b 85 7c ff ff ff            	mov	eax, dword ptr [ebp - 132]
     305: 89 02                        	mov	dword ptr [edx], eax
     307: eb de                        	jmp	0x2e7 <vfprintf+0x2e7>
     309: 8b 03                        	mov	eax, dword ptr [ebx]
     30b: c6 45 a8 00                  	mov	byte ptr [ebp - 88], 0
     30f: 83 c3 04                     	add	ebx, 4
     312: 8d 75 a7                     	lea	esi, [ebp - 89]
     315: c6 45 8c 00                  	mov	byte ptr [ebp - 116], 0
     319: 88 45 a7                     	mov	byte ptr [ebp - 89], al
     31c: eb 16                        	jmp	0x334 <vfprintf+0x334>
     31e: 8b 33                        	mov	esi, dword ptr [ebx]
     320: 83 c3 04                     	add	ebx, 4
     323: 83 7d 88 ff                  	cmp	dword ptr [ebp - 120], -1
     327: 75 2c                        	jne	0x355 <vfprintf+0x355>
     329: eb 05                        	jmp	0x330 <vfprintf+0x330>
     32b: be 00 00 00 00               	mov	esi, 0
			0000032c:  R_386_32	.rodata.vfprintf.str1.1
     330: c6 45 8c 00                  	mov	byte ptr [ebp - 116], 0
     334: c6 85 7b ff ff ff 00         	mov	byte ptr [ebp - 133], 0
     33b: 31 ff                        	xor	edi, edi
     33d: 83 ec 0c                     	sub	esp, 12
     340: 56                           	push	esi
     341: e8 fc ff ff ff               	call	0x342 <vfprintf+0x342>
			00000342:  R_386_PC32	strlen
     346: c7 45 80 ff ff ff ff         	mov	dword ptr [ebp - 128], 4294967295
     34d: 83 c4 10                     	add	esp, 16
     350: 89 45 88                     	mov	dword ptr [ebp - 120], eax
     353: eb 13                        	jmp	0x368 <vfprintf+0x368>
     355: 8b 45 88                     	mov	eax, dword ptr [ebp - 120]
     358: c6 45 8c 00                  	mov	byte ptr [ebp - 116], 0
     35c: 31 ff                        	xor	edi, edi
     35e: c6 85 7b ff ff ff 00         	mov	byte ptr [ebp - 133], 0
     365: 89 45 80                     	mov	dword ptr [ebp - 128], eax
     368: 8b 8d 6c ff ff ff            	mov	ecx, dword ptr [ebp - 148]
     36e: 8b 45 88                     	mov	eax, dword ptr [ebp - 120]
     371: 29 c1                        	sub	ecx, eax
     373: 80 bd 7b ff ff ff 01         	cmp	byte ptr [ebp - 133], 1
     37a: 83 d1 ff                     	adc	ecx, -1
     37d: 80 7d 8c 00                  	cmp	byte ptr [ebp - 116], 0
     381: 0f 95 c0                     	setne	al
     384: 31 d2                        	xor	edx, edx
     386: 22 85 68 ff ff ff            	and	al, byte ptr [ebp - 152]
     38c: 88 85 6c ff ff ff            	mov	byte ptr [ebp - 148], al
     392: 74 0a                        	je	0x39e <vfprintf+0x39e>
     394: 31 d2                        	xor	edx, edx
     396: 80 7d 8c 6f                  	cmp	byte ptr [ebp - 116], 111
     39a: 0f 95 c2                     	setne	dl
     39d: 42                           	inc	edx
     39e: 29 d1                        	sub	ecx, edx
     3a0: 80 bd 64 ff ff ff 01         	cmp	byte ptr [ebp - 156], 1
     3a7: 89 4d 88                     	mov	dword ptr [ebp - 120], ecx
     3aa: 74 2a                        	je	0x3d6 <vfprintf+0x3d6>
     3ac: 80 bd 70 ff ff ff 00         	cmp	byte ptr [ebp - 144], 0
     3b3: 74 13                        	je	0x3c8 <vfprintf+0x3c8>
     3b5: 89 f8                        	mov	eax, edi
     3b7: ba 18 00 00 00               	mov	edx, 24
			000003b8:  R_386_32	.rodata.vfprintf.str1.1
     3bc: 84 c0                        	test	al, al
     3be: b8 10 00 00 00               	mov	eax, 16
			000003bf:  R_386_32	.rodata.vfprintf.str1.1
     3c3: 0f 44 c2                     	cmove	eax, edx
     3c6: eb 13                        	jmp	0x3db <vfprintf+0x3db>
     3c8: 80 bd 64 ff ff ff 00         	cmp	byte ptr [ebp - 156], 0
     3cf: b8 18 00 00 00               	mov	eax, 24
			000003d0:  R_386_32	.rodata.vfprintf.str1.1
     3d4: 74 05                        	je	0x3db <vfprintf+0x3db>
     3d6: b8 14 00 00 00               	mov	eax, 20
			000003d7:  R_386_32	.rodata.vfprintf.str1.1
     3db: 89 85 70 ff ff ff            	mov	dword ptr [ebp - 144], eax
     3e1: 0f be 45 8c                  	movsx	eax, byte ptr [ebp - 116]
     3e5: 89 85 68 ff ff ff            	mov	dword ptr [ebp - 152], eax
     3eb: 8b 85 70 ff ff ff            	mov	eax, dword ptr [ebp - 144]
     3f1: 8a 00                        	mov	al, byte ptr [eax]
     3f3: 84 c0                        	test	al, al
     3f5: 0f 84 fd 00 00 00            	je	0x4f8 <vfprintf+0x4f8>
     3fb: 3c 73                        	cmp	al, 115
     3fd: 75 61                        	jne	0x460 <vfprintf+0x460>
     3ff: 80 bd 7b ff ff ff 00         	cmp	byte ptr [ebp - 133], 0
     406: 8b bd 7c ff ff ff            	mov	edi, dword ptr [ebp - 132]
     40c: 74 16                        	je	0x424 <vfprintf+0x424>
     40e: 50                           	push	eax
     40f: 47                           	inc	edi
     410: 50                           	push	eax
     411: ff 75 08                     	push	dword ptr [ebp + 8]
     414: 0f be 85 7b ff ff ff         	movsx	eax, byte ptr [ebp - 133]
     41b: 50                           	push	eax
     41c: e8 fc ff ff ff               	call	0x41d <vfprintf+0x41d>
			0000041d:  R_386_PC32	fputc
     421: 83 c4 10                     	add	esp, 16
     424: 80 bd 6c ff ff ff 00         	cmp	byte ptr [ebp - 148], 0
     42b: 0f 84 b6 00 00 00            	je	0x4e7 <vfprintf+0x4e7>
     431: 80 7d 8c 6f                  	cmp	byte ptr [ebp - 116], 111
     435: 74 10                        	je	0x447 <vfprintf+0x447>
     437: 50                           	push	eax
     438: 47                           	inc	edi
     439: 50                           	push	eax
     43a: ff 75 08                     	push	dword ptr [ebp + 8]
     43d: 6a 30                        	push	48
     43f: e8 fc ff ff ff               	call	0x440 <vfprintf+0x440>
			00000440:  R_386_PC32	fputc
     444: 83 c4 10                     	add	esp, 16
     447: 51                           	push	ecx
     448: 47                           	inc	edi
     449: 51                           	push	ecx
     44a: ff 75 08                     	push	dword ptr [ebp + 8]
     44d: ff b5 68 ff ff ff            	push	dword ptr [ebp - 152]
     453: e8 fc ff ff ff               	call	0x454 <vfprintf+0x454>
			00000454:  R_386_PC32	fputc
     458: 83 c4 10                     	add	esp, 16
     45b: e9 87 00 00 00               	jmp	0x4e7 <vfprintf+0x4e7>
     460: 3c 64                        	cmp	al, 100
     462: 74 08                        	je	0x46c <vfprintf+0x46c>
     464: 8b 55 88                     	mov	edx, dword ptr [ebp - 120]
     467: 0f be f8                     	movsx	edi, al
     46a: eb 3d                        	jmp	0x4a9 <vfprintf+0x4a9>
     46c: 31 d2                        	xor	edx, edx
     46e: 8b 85 7c ff ff ff            	mov	eax, dword ptr [ebp - 132]
     474: 8d 3c 10                     	lea	edi, [eax + edx]
     477: 0f be 04 16                  	movsx	eax, byte ptr [esi + edx]
     47b: 84 c0                        	test	al, al
     47d: 74 68                        	je	0x4e7 <vfprintf+0x4e7>
     47f: 83 7d 80 ff                  	cmp	dword ptr [ebp - 128], -1
     483: 75 1d                        	jne	0x4a2 <vfprintf+0x4a2>
     485: 89 95 64 ff ff ff            	mov	dword ptr [ebp - 156], edx
     48b: 52                           	push	edx
     48c: 52                           	push	edx
     48d: ff 75 08                     	push	dword ptr [ebp + 8]
     490: 50                           	push	eax
     491: e8 fc ff ff ff               	call	0x492 <vfprintf+0x492>
			00000492:  R_386_PC32	fputc
     496: 8b 95 64 ff ff ff            	mov	edx, dword ptr [ebp - 156]
     49c: 83 c4 10                     	add	esp, 16
     49f: 42                           	inc	edx
     4a0: eb cc                        	jmp	0x46e <vfprintf+0x46e>
     4a2: 39 55 80                     	cmp	dword ptr [ebp - 128], edx
     4a5: 7f de                        	jg	0x485 <vfprintf+0x485>
     4a7: eb 3e                        	jmp	0x4e7 <vfprintf+0x4e7>
     4a9: 85 d2                        	test	edx, edx
     4ab: 7e 1d                        	jle	0x4ca <vfprintf+0x4ca>
     4ad: 89 95 64 ff ff ff            	mov	dword ptr [ebp - 156], edx
     4b3: 50                           	push	eax
     4b4: 50                           	push	eax
     4b5: ff 75 08                     	push	dword ptr [ebp + 8]
     4b8: 57                           	push	edi
     4b9: e8 fc ff ff ff               	call	0x4ba <vfprintf+0x4ba>
			000004ba:  R_386_PC32	fputc
     4be: 8b 95 64 ff ff ff            	mov	edx, dword ptr [ebp - 156]
     4c4: 83 c4 10                     	add	esp, 16
     4c7: 4a                           	dec	edx
     4c8: eb df                        	jmp	0x4a9 <vfprintf+0x4a9>
     4ca: 8b 4d 88                     	mov	ecx, dword ptr [ebp - 120]
     4cd: 31 c0                        	xor	eax, eax
     4cf: 83 7d 88 00                  	cmp	dword ptr [ebp - 120], 0
     4d3: 0f 49 45 88                  	cmovns	eax, dword ptr [ebp - 120]
     4d7: 8b bd 7c ff ff ff            	mov	edi, dword ptr [ebp - 132]
     4dd: 8d 51 ff                     	lea	edx, [ecx - 1]
     4e0: 29 c2                        	sub	edx, eax
     4e2: 01 c7                        	add	edi, eax
     4e4: 89 55 88                     	mov	dword ptr [ebp - 120], edx
     4e7: ff 85 70 ff ff ff            	inc	dword ptr [ebp - 144]
     4ed: 89 bd 7c ff ff ff            	mov	dword ptr [ebp - 132], edi
     4f3: e9 f3 fe ff ff               	jmp	0x3eb <vfprintf+0x3eb>
     4f8: ff 85 74 ff ff ff            	inc	dword ptr [ebp - 140]
     4fe: e9 25 fb ff ff               	jmp	0x28 <vfprintf+0x28>
     503: 88 95 70 ff ff ff            	mov	byte ptr [ebp - 144], dl
     509: 8a 95 68 ff ff ff            	mov	dl, byte ptr [ebp - 152]
     50f: 88 95 68 ff ff ff            	mov	byte ptr [ebp - 152], dl
     515: e9 91 fb ff ff               	jmp	0xab <vfprintf+0xab>
     51a: c6 45 8c 00                  	mov	byte ptr [ebp - 116], 0
     51e: 83 7d 88 ff                  	cmp	dword ptr [ebp - 120], -1
     522: eb 1b                        	jmp	0x53f <vfprintf+0x53f>
     524: c6 45 8c 00                  	mov	byte ptr [ebp - 116], 0
     528: 31 ff                        	xor	edi, edi
     52a: be 00 00 00 00               	mov	esi, 0
			0000052b:  R_386_32	.rodata.vfprintf.str1.1
     52f: c6 85 7b ff ff ff 00         	mov	byte ptr [ebp - 133], 0
     536: e9 02 fe ff ff               	jmp	0x33d <vfprintf+0x33d>
     53b: 83 7d 88 ff                  	cmp	dword ptr [ebp - 120], -1
     53f: 0f 85 70 01 00 00            	jne	0x6b5 <vfprintf+0x6b5>
     545: c7 45 88 01 00 00 00         	mov	dword ptr [ebp - 120], 1
     54c: 3c 74                        	cmp	al, 116
     54e: 7f 64                        	jg	0x5b4 <vfprintf+0x5b4>
     550: 3c 67                        	cmp	al, 103
     552: 7f 09                        	jg	0x55d <vfprintf+0x55d>
     554: 3c 48                        	cmp	al, 72
     556: 75 5c                        	jne	0x5b4 <vfprintf+0x5b4>
     558: 0f b6 03                     	movzx	eax, byte ptr [ebx]
     55b: eb 14                        	jmp	0x571 <vfprintf+0x571>
     55d: 83 e8 68                     	sub	eax, 104
     560: 3c 0c                        	cmp	al, 12
     562: 77 50                        	ja	0x5b4 <vfprintf+0x5b4>
     564: 0f b6 c0                     	movzx	eax, al
     567: ff 24 85 c0 00 00 00         	jmp	dword ptr [4*eax + 192]
			0000056a:  R_386_32	.rodata.vfprintf
     56e: 0f b7 03                     	movzx	eax, word ptr [ebx]
     571: 31 ff                        	xor	edi, edi
     573: 89 45 80                     	mov	dword ptr [ebp - 128], eax
     576: 89 7d 84                     	mov	dword ptr [ebp - 124], edi
     579: eb 43                        	jmp	0x5be <vfprintf+0x5be>
     57b: 8b 03                        	mov	eax, dword ptr [ebx]
     57d: 8b 53 04                     	mov	edx, dword ptr [ebx + 4]
     580: 83 c3 08                     	add	ebx, 8
     583: 89 45 80                     	mov	dword ptr [ebp - 128], eax
     586: 89 55 84                     	mov	dword ptr [ebp - 124], edx
     589: eb 36                        	jmp	0x5c1 <vfprintf+0x5c1>
     58b: 8b 03                        	mov	eax, dword ptr [ebx]
     58d: 89 45 80                     	mov	dword ptr [ebp - 128], eax
     590: c1 f8 1f                     	sar	eax, 31
     593: 89 45 84                     	mov	dword ptr [ebp - 124], eax
     596: eb 26                        	jmp	0x5be <vfprintf+0x5be>
     598: 83 7d 88 ff                  	cmp	dword ptr [ebp - 120], -1
     59c: c6 85 68 ff ff ff 01         	mov	byte ptr [ebp - 152], 1
     5a3: c6 45 8c 78                  	mov	byte ptr [ebp - 116], 120
     5a7: 0f 85 8d 01 00 00            	jne	0x73a <vfprintf+0x73a>
     5ad: c7 45 88 01 00 00 00         	mov	dword ptr [ebp - 120], 1
     5b4: 8b 03                        	mov	eax, dword ptr [ebx]
     5b6: 31 d2                        	xor	edx, edx
     5b8: 89 55 84                     	mov	dword ptr [ebp - 124], edx
     5bb: 89 45 80                     	mov	dword ptr [ebp - 128], eax
     5be: 83 c3 04                     	add	ebx, 4
     5c1: 8a 85 58 ff ff ff            	mov	al, byte ptr [ebp - 168]
     5c7: c6 85 7b ff ff ff 2b         	mov	byte ptr [ebp - 133], 43
     5ce: 84 c0                        	test	al, al
     5d0: 75 0b                        	jne	0x5dd <vfprintf+0x5dd>
     5d2: 89 f0                        	mov	eax, esi
     5d4: c1 e0 05                     	shl	eax, 5
     5d7: 88 85 7b ff ff ff            	mov	byte ptr [ebp - 133], al
     5dd: 8d 45 a7                     	lea	eax, [ebp - 89]
     5e0: 51                           	push	ecx
     5e1: 8d 7d c7                     	lea	edi, [ebp - 57]
     5e4: be 1c 00 00 00               	mov	esi, 28
			000005e5:  R_386_32	.rodata.vfprintf.str1.1
     5e9: 6a 20                        	push	32
     5eb: 6a 00                        	push	0
     5ed: 50                           	push	eax
     5ee: e8 fc ff ff ff               	call	0x5ef <vfprintf+0x5ef>
			000005ef:  R_386_PC32	memset
     5f3: 83 c4 10                     	add	esp, 16
     5f6: 80 7d 8c 00                  	cmp	byte ptr [ebp - 116], 0
     5fa: b9 21 00 00 00               	mov	ecx, 33
     5ff: f3 a4                        	rep		movsb	byte ptr es:[edi], byte ptr [esi]
     601: b8 0a 00 00 00               	mov	eax, 10
     606: 74 10                        	je	0x618 <vfprintf+0x618>
     608: 31 c0                        	xor	eax, eax
     60a: 80 7d 8c 6f                  	cmp	byte ptr [ebp - 116], 111
     60e: 0f 95 c0                     	setne	al
     611: 8d 04 c5 08 00 00 00         	lea	eax, [8*eax + 8]
     618: 31 c9                        	xor	ecx, ecx
     61a: 80 7d 8c 78                  	cmp	byte ptr [ebp - 116], 120
     61e: 89 85 50 ff ff ff            	mov	dword ptr [ebp - 176], eax
     624: 0f 94 c1                     	sete	cl
     627: 31 ff                        	xor	edi, edi
     629: c1 f8 1f                     	sar	eax, 31
     62c: 89 ce                        	mov	esi, ecx
     62e: 89 85 54 ff ff ff            	mov	dword ptr [ebp - 172], eax
     634: 0f a4 f7 04                  	shld	edi, esi, 4
     638: c1 e6 04                     	shl	esi, 4
     63b: 89 bd 5c ff ff ff            	mov	dword ptr [ebp - 164], edi
     641: 89 b5 58 ff ff ff            	mov	dword ptr [ebp - 168], esi
     647: be 1f 00 00 00               	mov	esi, 31
     64c: 8b 45 88                     	mov	eax, dword ptr [ebp - 120]
     64f: 8b 55 84                     	mov	edx, dword ptr [ebp - 124]
     652: 8d 4c 06 e1                  	lea	ecx, [esi + eax - 31]
     656: 8b 45 80                     	mov	eax, dword ptr [ebp - 128]
     659: 09 d0                        	or	eax, edx
     65b: 74 46                        	je	0x6a3 <vfprintf+0x6a3>
     65d: 83 ec 0c                     	sub	esp, 12
     660: 8d 45 90                     	lea	eax, [ebp - 112]
     663: 4e                           	dec	esi
     664: 50                           	push	eax
     665: ff b5 54 ff ff ff            	push	dword ptr [ebp - 172]
     66b: ff b5 50 ff ff ff            	push	dword ptr [ebp - 176]
     671: ff 75 84                     	push	dword ptr [ebp - 124]
     674: ff 75 80                     	push	dword ptr [ebp - 128]
     677: e8 fc ff ff ff               	call	0x678 <vfprintf+0x678>
			00000678:  R_386_PC32	__udivmoddi4
     67c: 83 c4 20                     	add	esp, 32
     67f: 89 45 80                     	mov	dword ptr [ebp - 128], eax
     682: 8b 85 58 ff ff ff            	mov	eax, dword ptr [ebp - 168]
     688: 03 45 90                     	add	eax, dword ptr [ebp - 112]
     68b: 89 55 84                     	mov	dword ptr [ebp - 124], edx
     68e: 89 c2                        	mov	edx, eax
     690: b8 e8 ff ff ff               	mov	eax, 4294967272
     695: 01 d0                        	add	eax, edx
     697: 8d 0c 28                     	lea	ecx, [eax + ebp]
     69a: 8a 49 df                     	mov	cl, byte ptr [ecx - 33]
     69d: 88 4c 35 a7                  	mov	byte ptr [ebp + esi - 89], cl
     6a1: eb a9                        	jmp	0x64c <vfprintf+0x64c>
     6a3: 85 c9                        	test	ecx, ecx
     6a5: 7f b6                        	jg	0x65d <vfprintf+0x65d>
     6a7: 8d 74 35 a7                  	lea	esi, [ebp + esi - 89]
     6ab: bf 01 00 00 00               	mov	edi, 1
     6b0: e9 88 fc ff ff               	jmp	0x33d <vfprintf+0x33d>
     6b5: c6 85 70 ff ff ff 00         	mov	byte ptr [ebp - 144], 0
     6bc: e9 8b fe ff ff               	jmp	0x54c <vfprintf+0x54c>
     6c1: 83 7d 88 ff                  	cmp	dword ptr [ebp - 120], -1
     6c5: c6 45 8c 00                  	mov	byte ptr [ebp - 116], 0
     6c9: 75 66                        	jne	0x731 <vfprintf+0x731>
     6cb: c7 45 88 01 00 00 00         	mov	dword ptr [ebp - 120], 1
     6d2: 3c 74                        	cmp	al, 116
     6d4: 7f 2d                        	jg	0x703 <vfprintf+0x703>
     6d6: 3c 67                        	cmp	al, 103
     6d8: 7f 09                        	jg	0x6e3 <vfprintf+0x6e3>
     6da: 3c 48                        	cmp	al, 72
     6dc: 75 25                        	jne	0x703 <vfprintf+0x703>
     6de: 0f be 03                     	movsx	eax, byte ptr [ebx]
     6e1: eb 22                        	jmp	0x705 <vfprintf+0x705>
     6e3: 83 e8 68                     	sub	eax, 104
     6e6: 3c 0c                        	cmp	al, 12
     6e8: 77 19                        	ja	0x703 <vfprintf+0x703>
     6ea: 0f b6 c0                     	movzx	eax, al
     6ed: ff 24 85 f4 00 00 00         	jmp	dword ptr [4*eax + 244]
			000006f0:  R_386_32	.rodata.vfprintf
     6f4: 0f bf 03                     	movsx	eax, word ptr [ebx]
     6f7: eb 0c                        	jmp	0x705 <vfprintf+0x705>
     6f9: 8b 03                        	mov	eax, dword ptr [ebx]
     6fb: 8b 53 04                     	mov	edx, dword ptr [ebx + 4]
     6fe: 83 c3 08                     	add	ebx, 8
     701: eb 06                        	jmp	0x709 <vfprintf+0x709>
     703: 8b 03                        	mov	eax, dword ptr [ebx]
     705: 99                           	cdq
     706: 83 c3 04                     	add	ebx, 4
     709: 85 d2                        	test	edx, edx
     70b: 78 0b                        	js	0x718 <vfprintf+0x718>
     70d: 89 45 80                     	mov	dword ptr [ebp - 128], eax
     710: 89 55 84                     	mov	dword ptr [ebp - 124], edx
     713: e9 a9 fe ff ff               	jmp	0x5c1 <vfprintf+0x5c1>
     718: f7 d8                        	neg	eax
     71a: c6 85 7b ff ff ff 2d         	mov	byte ptr [ebp - 133], 45
     721: 83 d2 00                     	adc	edx, 0
     724: 89 45 80                     	mov	dword ptr [ebp - 128], eax
     727: f7 da                        	neg	edx
     729: 89 55 84                     	mov	dword ptr [ebp - 124], edx
     72c: e9 ac fe ff ff               	jmp	0x5dd <vfprintf+0x5dd>
     731: c6 85 70 ff ff ff 00         	mov	byte ptr [ebp - 144], 0
     738: eb 98                        	jmp	0x6d2 <vfprintf+0x6d2>
     73a: c6 85 70 ff ff ff 00         	mov	byte ptr [ebp - 144], 0
     741: e9 6e fe ff ff               	jmp	0x5b4 <vfprintf+0x5b4>
     746: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
     749: 8b 75 08                     	mov	esi, dword ptr [ebp + 8]
     74c: 8b 40 40                     	mov	eax, dword ptr [eax + 64]
     74f: 48                           	dec	eax
     750: 89 46 40                     	mov	dword ptr [esi + 64], eax
     753: 8b 85 7c ff ff ff            	mov	eax, dword ptr [ebp - 132]
     759: 8d 65 f4                     	lea	esp, [ebp - 12]
     75c: 5b                           	pop	ebx
     75d: 5e                           	pop	esi
     75e: 5f                           	pop	edi
     75f: 5d                           	pop	ebp
     760: c3                           	ret

Disassembly of section .text.vsnprintf:

00000000 <vsnprintf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 83 ec 10                     	sub	esp, 16
       9: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
       c: 68 00 00 00 00               	push	0
			0000000d:  R_386_32	.rodata.vsnprintf.str1.1
      11: 8d 78 ff                     	lea	edi, [eax - 1]
      14: 57                           	push	edi
      15: ff 75 08                     	push	dword ptr [ebp + 8]
      18: e8 fc ff ff ff               	call	0x19 <vsnprintf+0x19>
			00000019:  R_386_PC32	fmemopen
      1d: 83 c4 10                     	add	esp, 16
      20: 85 c0                        	test	eax, eax
      22: 74 2e                        	je	0x52 <vsnprintf+0x52>
      24: 89 c6                        	mov	esi, eax
      26: 50                           	push	eax
      27: ff 75 14                     	push	dword ptr [ebp + 20]
      2a: ff 75 10                     	push	dword ptr [ebp + 16]
      2d: 56                           	push	esi
      2e: e8 fc ff ff ff               	call	0x2f <vsnprintf+0x2f>
			0000002f:  R_386_PC32	vfprintf
      33: 89 34 24                     	mov	dword ptr [esp], esi
      36: 89 c3                        	mov	ebx, eax
      38: e8 fc ff ff ff               	call	0x39 <vsnprintf+0x39>
			00000039:  R_386_PC32	fclose
      3d: 83 c4 10                     	add	esp, 16
      40: 89 c6                        	mov	esi, eax
      42: 83 fb ff                     	cmp	ebx, -1
      45: 74 0b                        	je	0x52 <vsnprintf+0x52>
      47: 85 c0                        	test	eax, eax
      49: 74 0c                        	je	0x57 <vsnprintf+0x57>
      4b: e8 fc ff ff ff               	call	0x4c <vsnprintf+0x4c>
			0000004c:  R_386_PC32	__thread_local_errno_
      50: 89 30                        	mov	dword ptr [eax], esi
      52: 83 cb ff                     	or	ebx, -1
      55: eb 0f                        	jmp	0x66 <vsnprintf+0x66>
      57: 39 df                        	cmp	edi, ebx
      59: 7f 0b                        	jg	0x66 <vsnprintf+0x66>
      5b: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      5e: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
      61: c6 44 10 ff 00               	mov	byte ptr [eax + edx - 1], 0
      66: 8d 65 f4                     	lea	esp, [ebp - 12]
      69: 89 d8                        	mov	eax, ebx
      6b: 5b                           	pop	ebx
      6c: 5e                           	pop	esi
      6d: 5f                           	pop	edi
      6e: 5d                           	pop	ebp
      6f: c3                           	ret

Disassembly of section .text.vsprintf:

00000000 <vsprintf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 08                     	sub	esp, 8
       6: ff 75 10                     	push	dword ptr [ebp + 16]
       9: ff 75 0c                     	push	dword ptr [ebp + 12]
       c: 68 ff ff ff 7f               	push	2147483647
      11: ff 75 08                     	push	dword ptr [ebp + 8]
      14: e8 fc ff ff ff               	call	0x15 <vsprintf+0x15>
			00000015:  R_386_PC32	vsnprintf
      19: c9                           	leave
      1a: c3                           	ret

Disassembly of section .text.vprintf:

00000000 <vprintf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 0c                     	sub	esp, 12
       6: ff 75 0c                     	push	dword ptr [ebp + 12]
       9: ff 75 08                     	push	dword ptr [ebp + 8]
       c: ff 35 00 00 00 00            	push	dword ptr [0]
			0000000e:  R_386_32	stdout
      12: e8 fc ff ff ff               	call	0x13 <vprintf+0x13>
			00000013:  R_386_PC32	vfprintf
      17: c9                           	leave
      18: c3                           	ret

Disassembly of section .text.fprintf:

00000000 <fprintf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 0c                     	sub	esp, 12
       6: 8d 45 10                     	lea	eax, [ebp + 16]
       9: 50                           	push	eax
       a: ff 75 0c                     	push	dword ptr [ebp + 12]
       d: ff 75 08                     	push	dword ptr [ebp + 8]
      10: e8 fc ff ff ff               	call	0x11 <fprintf+0x11>
			00000011:  R_386_PC32	vfprintf
      15: c9                           	leave
      16: c3                           	ret

Disassembly of section .text.printf:

00000000 <printf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 10                     	sub	esp, 16
       6: 8d 45 0c                     	lea	eax, [ebp + 12]
       9: 50                           	push	eax
       a: ff 75 08                     	push	dword ptr [ebp + 8]
       d: e8 fc ff ff ff               	call	0xe <printf+0xe>
			0000000e:  R_386_PC32	vprintf
      12: c9                           	leave
      13: c3                           	ret

Disassembly of section .text.sprintf:

00000000 <sprintf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 0c                     	sub	esp, 12
       6: 8d 45 10                     	lea	eax, [ebp + 16]
       9: 50                           	push	eax
       a: ff 75 0c                     	push	dword ptr [ebp + 12]
       d: ff 75 08                     	push	dword ptr [ebp + 8]
      10: e8 fc ff ff ff               	call	0x11 <sprintf+0x11>
			00000011:  R_386_PC32	vsprintf
      15: c9                           	leave
      16: c3                           	ret

Disassembly of section .text.snprintf:

00000000 <snprintf>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 08                     	sub	esp, 8
       6: 8d 45 14                     	lea	eax, [ebp + 20]
       9: 50                           	push	eax
       a: ff 75 10                     	push	dword ptr [ebp + 16]
       d: ff 75 0c                     	push	dword ptr [ebp + 12]
      10: ff 75 08                     	push	dword ptr [ebp + 8]
      13: e8 fc ff ff ff               	call	0x14 <snprintf+0x14>
			00000014:  R_386_PC32	vsnprintf
      18: c9                           	leave
      19: c3                           	ret

libc/x86/libc.a(creat.o):	file format elf32-i386

Disassembly of section .text.creat:

00000000 <creat>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 0c                     	sub	esp, 12
       6: ff 75 0c                     	push	dword ptr [ebp + 12]
       9: 6a 25                        	push	37
       b: ff 75 08                     	push	dword ptr [ebp + 8]
       e: e8 fc ff ff ff               	call	0xf <creat+0xf>
			0000000f:  R_386_PC32	open
      13: c9                           	leave
      14: c3                           	ret

libc/x86/libc.a(wait.o):	file format elf32-i386

Disassembly of section .text.wait:

00000000 <wait>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 0c                     	sub	esp, 12
       6: 6a 00                        	push	0
       8: ff 75 08                     	push	dword ptr [ebp + 8]
       b: 6a ff                        	push	-1
       d: e8 fc ff ff ff               	call	0xe <wait+0xe>
			0000000e:  R_386_PC32	waitpid
      12: c9                           	leave
      13: c3                           	ret

libc/x86/libc.a(exit.o):	file format elf32-i386

Disassembly of section .text.atexit:

00000000 <atexit>:
       0: a1 00 00 00 00               	mov	eax, dword ptr [0]
			00000001:  R_386_32	.bss.num_handlers
       5: 83 f8 3f                     	cmp	eax, 63
       8: 7f 23                        	jg	0x2d <atexit+0x2d>
       a: 55                           	push	ebp
       b: 8d 50 01                     	lea	edx, [eax + 1]
       e: 89 15 00 00 00 00            	mov	dword ptr [0], edx
			00000010:  R_386_32	.bss.num_handlers
      14: 89 e5                        	mov	ebp, esp
      16: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
      19: 5d                           	pop	ebp
      1a: 89 14 c5 00 00 00 00         	mov	dword ptr [8*eax], edx
			0000001d:  R_386_32	.bss.handlers
      21: 31 d2                        	xor	edx, edx
      23: 89 14 c5 04 00 00 00         	mov	dword ptr [8*eax + 4], edx
			00000026:  R_386_32	.bss.handlers
      2a: 31 c0                        	xor	eax, eax
      2c: c3                           	ret
      2d: b8 01 00 00 00               	mov	eax, 1
      32: c3                           	ret

Disassembly of section .text.on_exit:

00000000 <on_exit>:
       0: a1 00 00 00 00               	mov	eax, dword ptr [0]
			00000001:  R_386_32	.bss.num_handlers
       5: 83 f8 3f                     	cmp	eax, 63
       8: 7f 24                        	jg	0x2e <on_exit+0x2e>
       a: 55                           	push	ebp
       b: 8d 50 01                     	lea	edx, [eax + 1]
       e: 89 15 00 00 00 00            	mov	dword ptr [0], edx
			00000010:  R_386_32	.bss.num_handlers
      14: 89 e5                        	mov	ebp, esp
      16: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
      19: 89 14 c5 00 00 00 00         	mov	dword ptr [8*eax], edx
			0000001c:  R_386_32	.bss.handlers
      20: 8b 55 08                     	mov	edx, dword ptr [ebp + 8]
      23: 5d                           	pop	ebp
      24: 89 14 c5 04 00 00 00         	mov	dword ptr [8*eax + 4], edx
			00000027:  R_386_32	.bss.handlers
      2b: 31 c0                        	xor	eax, eax
      2d: c3                           	ret
      2e: b8 01 00 00 00               	mov	eax, 1
      33: c3                           	ret

Disassembly of section .text.exit:

00000000 <exit>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 53                           	push	ebx
       4: 53                           	push	ebx
       5: 8b 5d 08                     	mov	ebx, dword ptr [ebp + 8]
       8: a1 00 00 00 00               	mov	eax, dword ptr [0]
			00000009:  R_386_32	.bss.num_handlers
       d: 85 c0                        	test	eax, eax
       f: 7e 27                        	jle	0x38 <exit+0x38>
      11: 48                           	dec	eax
      12: a3 00 00 00 00               	mov	dword ptr [0], eax
			00000013:  R_386_32	.bss.num_handlers
      17: 8b 14 c5 00 00 00 00         	mov	edx, dword ptr [8*eax]
			0000001a:  R_386_32	.bss.handlers
      1e: 8b 04 c5 04 00 00 00         	mov	eax, dword ptr [8*eax + 4]
			00000021:  R_386_32	.bss.handlers
      25: 85 c0                        	test	eax, eax
      27: 75 04                        	jne	0x2d <exit+0x2d>
      29: ff d2                        	call	edx
      2b: eb db                        	jmp	0x8 <exit+0x8>
      2d: 51                           	push	ecx
      2e: 51                           	push	ecx
      2f: 52                           	push	edx
      30: 53                           	push	ebx
      31: ff d0                        	call	eax
      33: 83 c4 10                     	add	esp, 16
      36: eb d0                        	jmp	0x8 <exit+0x8>
      38: 83 ec 0c                     	sub	esp, 12
      3b: 6a 00                        	push	0
      3d: e8 fc ff ff ff               	call	0x3e <exit+0x3e>
			0000003e:  R_386_PC32	fflush
      42: 89 1c 24                     	mov	dword ptr [esp], ebx
      45: e8 fc ff ff ff               	call	0x46 <exit+0x46>
			00000046:  R_386_PC32	_exit
      4a: 83 c4 10                     	add	esp, 16
      4d: eb fe                        	jmp	0x4d <exit+0x4d>

Disassembly of section .text.abort:

00000000 <abort>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 83 ec 14                     	sub	esp, 20
       6: 6a ff                        	push	-1
       8: e8 fc ff ff ff               	call	0x9 <abort+0x9>
			00000009:  R_386_PC32	_exit
       d: 83 c4 10                     	add	esp, 16
      10: eb fe                        	jmp	0x10 <abort+0x10>

libc/x86/libc.a(atoi.o):	file format elf32-i386

Disassembly of section .text.atoi:

00000000 <atoi>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 31 db                        	xor	ebx, ebx
       8: 83 ec 0c                     	sub	esp, 12
       b: 8b 75 08                     	mov	esi, dword ptr [ebp + 8]
       e: 0f be 04 1e                  	movsx	eax, byte ptr [esi + ebx]
      12: 84 c0                        	test	al, al
      14: 75 0c                        	jne	0x22 <atoi+0x22>
      16: 8a 04 1e                     	mov	al, byte ptr [esi + ebx]
      19: 3c 2b                        	cmp	al, 43
      1b: 75 18                        	jne	0x35 <atoi+0x35>
      1d: 43                           	inc	ebx
      1e: 31 ff                        	xor	edi, edi
      20: eb 1f                        	jmp	0x41 <atoi+0x41>
      22: 83 ec 0c                     	sub	esp, 12
      25: 50                           	push	eax
      26: e8 fc ff ff ff               	call	0x27 <atoi+0x27>
			00000027:  R_386_PC32	isspace
      2b: 83 c4 10                     	add	esp, 16
      2e: 85 c0                        	test	eax, eax
      30: 74 e4                        	je	0x16 <atoi+0x16>
      32: 43                           	inc	ebx
      33: eb d9                        	jmp	0xe <atoi+0xe>
      35: 31 ff                        	xor	edi, edi
      37: 3c 2d                        	cmp	al, 45
      39: 75 06                        	jne	0x41 <atoi+0x41>
      3b: 43                           	inc	ebx
      3c: bf 01 00 00 00               	mov	edi, 1
      41: 01 f3                        	add	ebx, esi
      43: 31 f6                        	xor	esi, esi
      45: 0f be 03                     	movsx	eax, byte ptr [ebx]
      48: 84 c0                        	test	al, al
      4a: 75 0a                        	jne	0x56 <atoi+0x56>
      4c: 89 f8                        	mov	eax, edi
      4e: 84 c0                        	test	al, al
      50: 74 21                        	je	0x73 <atoi+0x73>
      52: f7 de                        	neg	esi
      54: eb 1d                        	jmp	0x73 <atoi+0x73>
      56: 83 ec 0c                     	sub	esp, 12
      59: 50                           	push	eax
      5a: e8 fc ff ff ff               	call	0x5b <atoi+0x5b>
			0000005b:  R_386_PC32	isdigit
      5f: 83 c4 10                     	add	esp, 16
      62: 85 c0                        	test	eax, eax
      64: 74 e6                        	je	0x4c <atoi+0x4c>
      66: 6b f6 0a                     	imul	esi, esi, 10
      69: 0f be 03                     	movsx	eax, byte ptr [ebx]
      6c: 43                           	inc	ebx
      6d: 8d 74 06 d0                  	lea	esi, [esi + eax - 48]
      71: eb d2                        	jmp	0x45 <atoi+0x45>
      73: 8d 65 f4                     	lea	esp, [ebp - 12]
      76: 89 f0                        	mov	eax, esi
      78: 5b                           	pop	ebx
      79: 5e                           	pop	esi
      7a: 5f                           	pop	edi
      7b: 5d                           	pop	ebp
      7c: c3                           	ret

libc/x86/libc.a(strtol.o):	file format elf32-i386

Disassembly of section .text.IsDigitInBase:

00000000 <IsDigitInBase>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 56                           	push	esi
       4: 89 d6                        	mov	esi, edx
       6: 53                           	push	ebx
       7: 0f be d8                     	movsx	ebx, al
       a: 83 ec 0c                     	sub	esp, 12
       d: 53                           	push	ebx
       e: e8 fc ff ff ff               	call	0xf <IsDigitInBase+0xf>
			0000000f:  R_386_PC32	isdigit
      13: 83 c4 10                     	add	esp, 16
      16: 85 c0                        	test	eax, eax
      18: 74 09                        	je	0x23 <IsDigitInBase+0x23>
      1a: 8d 53 d1                     	lea	edx, [ebx - 47]
      1d: b0 01                        	mov	al, 1
      1f: 39 f2                        	cmp	edx, esi
      21: 7e 14                        	jle	0x37 <IsDigitInBase+0x37>
      23: 83 ec 0c                     	sub	esp, 12
      26: 53                           	push	ebx
      27: e8 fc ff ff ff               	call	0x28 <IsDigitInBase+0x28>
			00000028:  R_386_PC32	tolower
      2c: 83 c4 10                     	add	esp, 16
      2f: 83 e8 56                     	sub	eax, 86
      32: 39 f0                        	cmp	eax, esi
      34: 0f 9e c0                     	setle	al
      37: 8d 65 f8                     	lea	esp, [ebp - 8]
      3a: 5b                           	pop	ebx
      3b: 5e                           	pop	esi
      3c: 5d                           	pop	ebp
      3d: c3                           	ret

Disassembly of section .text.strtol:

00000000 <strtol>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 31 db                        	xor	ebx, ebx
       8: 83 ec 1c                     	sub	esp, 28
       b: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
       e: 83 e8 02                     	sub	eax, 2
      11: 83 f8 22                     	cmp	eax, 34
      14: 76 23                        	jbe	0x39 <strtol+0x39>
      16: e8 fc ff ff ff               	call	0x17 <strtol+0x17>
			00000017:  R_386_PC32	__thread_local_errno_
      1b: 31 f6                        	xor	esi, esi
      1d: c7 00 07 00 00 00            	mov	dword ptr [eax], 7
      23: e9 df 00 00 00               	jmp	0x107 <strtol+0x107>
      28: 83 ec 0c                     	sub	esp, 12
      2b: 50                           	push	eax
      2c: e8 fc ff ff ff               	call	0x2d <strtol+0x2d>
			0000002d:  R_386_PC32	isspace
      31: 83 c4 10                     	add	esp, 16
      34: 85 c0                        	test	eax, eax
      36: 74 0c                        	je	0x44 <strtol+0x44>
      38: 43                           	inc	ebx
      39: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      3c: 0f be 04 18                  	movsx	eax, byte ptr [eax + ebx]
      40: 84 c0                        	test	al, al
      42: 75 e4                        	jne	0x28 <strtol+0x28>
      44: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      47: 8a 04 18                     	mov	al, byte ptr [eax + ebx]
      4a: 3c 2b                        	cmp	al, 43
      4c: 75 05                        	jne	0x53 <strtol+0x53>
      4e: 43                           	inc	ebx
      4f: 31 ff                        	xor	edi, edi
      51: eb 0c                        	jmp	0x5f <strtol+0x5f>
      53: 31 ff                        	xor	edi, edi
      55: 3c 2d                        	cmp	al, 45
      57: 75 06                        	jne	0x5f <strtol+0x5f>
      59: 43                           	inc	ebx
      5a: bf 01 00 00 00               	mov	edi, 1
      5f: c6 45 e6 00                  	mov	byte ptr [ebp - 26], 0
      63: 03 5d 08                     	add	ebx, dword ptr [ebp + 8]
      66: 31 f6                        	xor	esi, esi
      68: 0f be 03                     	movsx	eax, byte ptr [ebx]
      6b: 84 c0                        	test	al, al
      6d: 75 19                        	jne	0x88 <strtol+0x88>
      6f: 83 7d 0c 00                  	cmp	dword ptr [ebp + 12], 0
      73: 0f 84 8e 00 00 00            	je	0x107 <strtol+0x107>
      79: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
      7c: 80 7d e6 00                  	cmp	byte ptr [ebp - 26], 0
      80: 0f 44 5d 08                  	cmove	ebx, dword ptr [ebp + 8]
      84: 89 18                        	mov	dword ptr [eax], ebx
      86: eb 7f                        	jmp	0x107 <strtol+0x107>
      88: 8b 55 10                     	mov	edx, dword ptr [ebp + 16]
      8b: e8 fc ff ff ff               	call	0x8c <strtol+0x8c>
			0000008c:  R_386_PC32	.text.IsDigitInBase
      90: 88 45 e7                     	mov	byte ptr [ebp - 25], al
      93: 84 c0                        	test	al, al
      95: 74 d8                        	je	0x6f <strtol+0x6f>
      97: 0f be 03                     	movsx	eax, byte ptr [ebx]
      9a: 83 ec 0c                     	sub	esp, 12
      9d: 0f af 75 10                  	imul	esi, dword ptr [ebp + 16]
      a1: 50                           	push	eax
      a2: e8 fc ff ff ff               	call	0xa3 <strtol+0xa3>
			000000a3:  R_386_PC32	isdigit
      a7: 83 c4 10                     	add	esp, 16
      aa: 0f be 0b                     	movsx	ecx, byte ptr [ebx]
      ad: 85 c0                        	test	eax, eax
      af: 74 05                        	je	0xb6 <strtol+0xb6>
      b1: 83 e9 30                     	sub	ecx, 48
      b4: eb 0f                        	jmp	0xc5 <strtol+0xc5>
      b6: 83 ec 0c                     	sub	esp, 12
      b9: 51                           	push	ecx
      ba: e8 fc ff ff ff               	call	0xbb <strtol+0xbb>
			000000bb:  R_386_PC32	tolower
      bf: 83 c4 10                     	add	esp, 16
      c2: 8d 48 a9                     	lea	ecx, [eax - 87]
      c5: 89 f8                        	mov	eax, edi
      c7: 84 c0                        	test	al, al
      c9: 74 16                        	je	0xe1 <strtol+0xe1>
      cb: 29 ce                        	sub	esi, ecx
      cd: 71 2c                        	jno	0xfb <strtol+0xfb>
      cf: e8 fc ff ff ff               	call	0xd0 <strtol+0xd0>
			000000d0:  R_386_PC32	__thread_local_errno_
      d4: be 00 00 00 80               	mov	esi, 2147483648
      d9: c7 00 16 00 00 00            	mov	dword ptr [eax], 22
      df: eb 26                        	jmp	0x107 <strtol+0x107>
      e1: 01 f1                        	add	ecx, esi
      e3: 70 04                        	jo	0xe9 <strtol+0xe9>
      e5: 89 ce                        	mov	esi, ecx
      e7: eb 12                        	jmp	0xfb <strtol+0xfb>
      e9: e8 fc ff ff ff               	call	0xea <strtol+0xea>
			000000ea:  R_386_PC32	__thread_local_errno_
      ee: be ff ff ff 7f               	mov	esi, 2147483647
      f3: c7 00 16 00 00 00            	mov	dword ptr [eax], 22
      f9: eb 0c                        	jmp	0x107 <strtol+0x107>
      fb: 8a 45 e7                     	mov	al, byte ptr [ebp - 25]
      fe: 43                           	inc	ebx
      ff: 88 45 e6                     	mov	byte ptr [ebp - 26], al
     102: e9 61 ff ff ff               	jmp	0x68 <strtol+0x68>
     107: 8d 65 f4                     	lea	esp, [ebp - 12]
     10a: 89 f0                        	mov	eax, esi
     10c: 5b                           	pop	ebx
     10d: 5e                           	pop	esi
     10e: 5f                           	pop	edi
     10f: 5d                           	pop	ebp
     110: c3                           	ret

Disassembly of section .text.strtoll:

00000000 <strtoll>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 31 f6                        	xor	esi, esi
       7: 53                           	push	ebx
       8: 83 ec 2c                     	sub	esp, 44
       b: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
       e: 83 e8 02                     	sub	eax, 2
      11: 83 f8 22                     	cmp	eax, 34
      14: 76 25                        	jbe	0x3b <strtoll+0x3b>
      16: e8 fc ff ff ff               	call	0x17 <strtoll+0x17>
			00000017:  R_386_PC32	__thread_local_errno_
      1b: 31 ff                        	xor	edi, edi
      1d: 31 c9                        	xor	ecx, ecx
      1f: c7 00 07 00 00 00            	mov	dword ptr [eax], 7
      25: e9 1e 01 00 00               	jmp	0x148 <strtoll+0x148>
      2a: 83 ec 0c                     	sub	esp, 12
      2d: 50                           	push	eax
      2e: e8 fc ff ff ff               	call	0x2f <strtoll+0x2f>
			0000002f:  R_386_PC32	isspace
      33: 83 c4 10                     	add	esp, 16
      36: 85 c0                        	test	eax, eax
      38: 74 0c                        	je	0x46 <strtoll+0x46>
      3a: 46                           	inc	esi
      3b: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      3e: 0f be 04 30                  	movsx	eax, byte ptr [eax + esi]
      42: 84 c0                        	test	al, al
      44: 75 e4                        	jne	0x2a <strtoll+0x2a>
      46: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      49: 8a 04 30                     	mov	al, byte ptr [eax + esi]
      4c: 3c 2b                        	cmp	al, 43
      4e: 75 07                        	jne	0x57 <strtoll+0x57>
      50: c6 45 e7 00                  	mov	byte ptr [ebp - 25], 0
      54: 46                           	inc	esi
      55: eb 0d                        	jmp	0x64 <strtoll+0x64>
      57: c6 45 e7 00                  	mov	byte ptr [ebp - 25], 0
      5b: 3c 2d                        	cmp	al, 45
      5d: 75 05                        	jne	0x64 <strtoll+0x64>
      5f: c6 45 e7 01                  	mov	byte ptr [ebp - 25], 1
      63: 46                           	inc	esi
      64: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
      67: 03 75 08                     	add	esi, dword ptr [ebp + 8]
      6a: 31 db                        	xor	ebx, ebx
      6c: 31 ff                        	xor	edi, edi
      6e: 31 c9                        	xor	ecx, ecx
      70: 99                           	cdq
      71: 89 45 d0                     	mov	dword ptr [ebp - 48], eax
      74: 89 55 d4                     	mov	dword ptr [ebp - 44], edx
      77: 0f be 06                     	movsx	eax, byte ptr [esi]
      7a: 84 c0                        	test	al, al
      7c: 75 1a                        	jne	0x98 <strtoll+0x98>
      7e: 83 7d 0c 00                  	cmp	dword ptr [ebp + 12], 0
      82: 0f 84 c0 00 00 00            	je	0x148 <strtoll+0x148>
      88: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
      8b: 84 db                        	test	bl, bl
      8d: 0f 44 75 08                  	cmove	esi, dword ptr [ebp + 8]
      91: 89 30                        	mov	dword ptr [eax], esi
      93: e9 b0 00 00 00               	jmp	0x148 <strtoll+0x148>
      98: 8b 55 10                     	mov	edx, dword ptr [ebp + 16]
      9b: 89 4d d8                     	mov	dword ptr [ebp - 40], ecx
      9e: e8 fc ff ff ff               	call	0x9f <strtoll+0x9f>
			0000009f:  R_386_PC32	.text.IsDigitInBase
      a3: 8b 4d d8                     	mov	ecx, dword ptr [ebp - 40]
      a6: 84 c0                        	test	al, al
      a8: 88 45 e6                     	mov	byte ptr [ebp - 26], al
      ab: 74 d1                        	je	0x7e <strtoll+0x7e>
      ad: 8b 45 d4                     	mov	eax, dword ptr [ebp - 44]
      b0: 0f af 4d 10                  	imul	ecx, dword ptr [ebp + 16]
      b4: 83 ec 0c                     	sub	esp, 12
      b7: 0f af c7                     	imul	eax, edi
      ba: 01 c1                        	add	ecx, eax
      bc: 89 f8                        	mov	eax, edi
      be: f7 65 10                     	mul	dword ptr [ebp + 16]
      c1: 89 45 d8                     	mov	dword ptr [ebp - 40], eax
      c4: 0f be 06                     	movsx	eax, byte ptr [esi]
      c7: 89 55 dc                     	mov	dword ptr [ebp - 36], edx
      ca: 01 4d dc                     	add	dword ptr [ebp - 36], ecx
      cd: 50                           	push	eax
      ce: e8 fc ff ff ff               	call	0xcf <strtoll+0xcf>
			000000cf:  R_386_PC32	isdigit
      d3: 83 c4 10                     	add	esp, 16
      d6: 85 c0                        	test	eax, eax
      d8: 0f be 06                     	movsx	eax, byte ptr [esi]
      db: 74 05                        	je	0xe2 <strtoll+0xe2>
      dd: 83 e8 30                     	sub	eax, 48
      e0: eb 0f                        	jmp	0xf1 <strtoll+0xf1>
      e2: 83 ec 0c                     	sub	esp, 12
      e5: 50                           	push	eax
      e6: e8 fc ff ff ff               	call	0xe7 <strtoll+0xe7>
			000000e7:  R_386_PC32	tolower
      eb: 83 c4 10                     	add	esp, 16
      ee: 83 e8 57                     	sub	eax, 87
      f1: 99                           	cdq
      f2: 80 7d e7 00                  	cmp	byte ptr [ebp - 25], 0
      f6: 74 26                        	je	0x11e <strtoll+0x11e>
      f8: 8b 4d d8                     	mov	ecx, dword ptr [ebp - 40]
      fb: 8b 5d dc                     	mov	ebx, dword ptr [ebp - 36]
      fe: 29 c1                        	sub	ecx, eax
     100: 19 d3                        	sbb	ebx, edx
     102: 71 14                        	jno	0x118 <strtoll+0x118>
     104: e8 fc ff ff ff               	call	0x105 <strtoll+0x105>
			00000105:  R_386_PC32	__thread_local_errno_
     109: 31 ff                        	xor	edi, edi
     10b: b9 00 00 00 80               	mov	ecx, 2147483648
     110: c7 00 16 00 00 00            	mov	dword ptr [eax], 22
     116: eb 30                        	jmp	0x148 <strtoll+0x148>
     118: 89 cf                        	mov	edi, ecx
     11a: 89 d9                        	mov	ecx, ebx
     11c: eb 21                        	jmp	0x13f <strtoll+0x13f>
     11e: 03 45 d8                     	add	eax, dword ptr [ebp - 40]
     121: 13 55 dc                     	adc	edx, dword ptr [ebp - 36]
     124: 71 15                        	jno	0x13b <strtoll+0x13b>
     126: e8 fc ff ff ff               	call	0x127 <strtoll+0x127>
			00000127:  R_386_PC32	__thread_local_errno_
     12b: 83 cf ff                     	or	edi, -1
     12e: b9 ff ff ff 7f               	mov	ecx, 2147483647
     133: c7 00 16 00 00 00            	mov	dword ptr [eax], 22
     139: eb 0d                        	jmp	0x148 <strtoll+0x148>
     13b: 89 c7                        	mov	edi, eax
     13d: 89 d1                        	mov	ecx, edx
     13f: 8a 5d e6                     	mov	bl, byte ptr [ebp - 26]
     142: 46                           	inc	esi
     143: e9 2f ff ff ff               	jmp	0x77 <strtoll+0x77>
     148: 8d 65 f4                     	lea	esp, [ebp - 12]
     14b: 89 f8                        	mov	eax, edi
     14d: 89 ca                        	mov	edx, ecx
     14f: 5b                           	pop	ebx
     150: 5e                           	pop	esi
     151: 5f                           	pop	edi
     152: 5d                           	pop	ebp
     153: c3                           	ret

Disassembly of section .text.strtoul:

00000000 <strtoul>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 31 db                        	xor	ebx, ebx
       8: 83 ec 1c                     	sub	esp, 28
       b: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
       e: 83 e8 02                     	sub	eax, 2
      11: 83 f8 22                     	cmp	eax, 34
      14: 76 21                        	jbe	0x37 <strtoul+0x37>
      16: e8 fc ff ff ff               	call	0x17 <strtoul+0x17>
			00000017:  R_386_PC32	__thread_local_errno_
      1b: c7 00 07 00 00 00            	mov	dword ptr [eax], 7
      21: e9 9d 00 00 00               	jmp	0xc3 <strtoul+0xc3>
      26: 83 ec 0c                     	sub	esp, 12
      29: 50                           	push	eax
      2a: e8 fc ff ff ff               	call	0x2b <strtoul+0x2b>
			0000002b:  R_386_PC32	isspace
      2f: 83 c4 10                     	add	esp, 16
      32: 85 c0                        	test	eax, eax
      34: 74 0c                        	je	0x42 <strtoul+0x42>
      36: 43                           	inc	ebx
      37: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      3a: 0f be 04 18                  	movsx	eax, byte ptr [eax + ebx]
      3e: 84 c0                        	test	al, al
      40: 75 e4                        	jne	0x26 <strtoul+0x26>
      42: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      45: 8a 04 18                     	mov	al, byte ptr [eax + ebx]
      48: 3c 2b                        	cmp	al, 43
      4a: 75 05                        	jne	0x51 <strtoul+0x51>
      4c: 43                           	inc	ebx
      4d: 31 f6                        	xor	esi, esi
      4f: eb 0c                        	jmp	0x5d <strtoul+0x5d>
      51: 31 f6                        	xor	esi, esi
      53: 3c 2d                        	cmp	al, 45
      55: 75 06                        	jne	0x5d <strtoul+0x5d>
      57: 43                           	inc	ebx
      58: be 01 00 00 00               	mov	esi, 1
      5d: c6 45 e6 00                  	mov	byte ptr [ebp - 26], 0
      61: 03 5d 08                     	add	ebx, dword ptr [ebp + 8]
      64: 31 ff                        	xor	edi, edi
      66: eb 13                        	jmp	0x7b <strtoul+0x7b>
      68: 8d 97 00 00 00 80            	lea	edx, [edi - 2147483648]
      6e: 29 c2                        	sub	edx, eax
      70: 70 46                        	jo	0xb8 <strtoul+0xb8>
      72: 29 c7                        	sub	edi, eax
      74: 8a 45 e7                     	mov	al, byte ptr [ebp - 25]
      77: 43                           	inc	ebx
      78: 88 45 e6                     	mov	byte ptr [ebp - 26], al
      7b: 0f be 03                     	movsx	eax, byte ptr [ebx]
      7e: 84 c0                        	test	al, al
      80: 74 45                        	je	0xc7 <strtoul+0xc7>
      82: 8b 55 10                     	mov	edx, dword ptr [ebp + 16]
      85: e8 fc ff ff ff               	call	0x86 <strtoul+0x86>
			00000086:  R_386_PC32	.text.IsDigitInBase
      8a: 88 45 e7                     	mov	byte ptr [ebp - 25], al
      8d: 84 c0                        	test	al, al
      8f: 74 36                        	je	0xc7 <strtoul+0xc7>
      91: 0f be 03                     	movsx	eax, byte ptr [ebx]
      94: 83 ec 0c                     	sub	esp, 12
      97: 0f af 7d 10                  	imul	edi, dword ptr [ebp + 16]
      9b: 50                           	push	eax
      9c: e8 fc ff ff ff               	call	0x9d <strtoul+0x9d>
			0000009d:  R_386_PC32	isdigit
      a1: 83 c4 10                     	add	esp, 16
      a4: 85 c0                        	test	eax, eax
      a6: 0f be 03                     	movsx	eax, byte ptr [ebx]
      a9: 74 31                        	je	0xdc <strtoul+0xdc>
      ab: 83 e8 30                     	sub	eax, 48
      ae: 89 f1                        	mov	ecx, esi
      b0: 84 c9                        	test	cl, cl
      b2: 74 39                        	je	0xed <strtoul+0xed>
      b4: 85 c0                        	test	eax, eax
      b6: 7e b0                        	jle	0x68 <strtoul+0x68>
      b8: e8 fc ff ff ff               	call	0xb9 <strtoul+0xb9>
			000000b9:  R_386_PC32	__thread_local_errno_
      bd: c7 00 16 00 00 00            	mov	dword ptr [eax], 22
      c3: 31 ff                        	xor	edi, edi
      c5: eb 45                        	jmp	0x10c <strtoul+0x10c>
      c7: 83 7d 0c 00                  	cmp	dword ptr [ebp + 12], 0
      cb: 74 3f                        	je	0x10c <strtoul+0x10c>
      cd: 8b 45 0c                     	mov	eax, dword ptr [ebp + 12]
      d0: 80 7d e6 00                  	cmp	byte ptr [ebp - 26], 0
      d4: 0f 44 5d 08                  	cmove	ebx, dword ptr [ebp + 8]
      d8: 89 18                        	mov	dword ptr [eax], ebx
      da: eb 30                        	jmp	0x10c <strtoul+0x10c>
      dc: 83 ec 0c                     	sub	esp, 12
      df: 50                           	push	eax
      e0: e8 fc ff ff ff               	call	0xe1 <strtoul+0xe1>
			000000e1:  R_386_PC32	tolower
      e5: 83 c4 10                     	add	esp, 16
      e8: 83 e8 57                     	sub	eax, 87
      eb: eb c1                        	jmp	0xae <strtoul+0xae>
      ed: 8d 97 00 00 00 80            	lea	edx, [edi - 2147483648]
      f3: 01 c2                        	add	edx, eax
      f5: 70 07                        	jo	0xfe <strtoul+0xfe>
      f7: 01 c7                        	add	edi, eax
      f9: e9 76 ff ff ff               	jmp	0x74 <strtoul+0x74>
      fe: e8 fc ff ff ff               	call	0xff <strtoul+0xff>
			000000ff:  R_386_PC32	__thread_local_errno_
     103: 83 cf ff                     	or	edi, -1
     106: c7 00 16 00 00 00            	mov	dword ptr [eax], 22
     10c: 8d 65 f4                     	lea	esp, [ebp - 12]
     10f: 89 f8                        	mov	eax, edi
     111: 5b                           	pop	ebx
     112: 5e                           	pop	esi
     113: 5f                           	pop	edi
     114: 5d                           	pop	ebp
     115: c3                           	ret

Disassembly of section .text.strtoull:

00000000 <strtoull>:
       0: 55                           	push	ebp
       1: 89 e5                        	mov	ebp, esp
       3: 57                           	push	edi
       4: 56                           	push	esi
       5: 53                           	push	ebx
       6: 31 db                        	xor	ebx, ebx
       8: 83 ec 2c                     	sub	esp, 44
       b: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
       e: 83 e8 02                     	sub	eax, 2
      11: 83 f8 22                     	cmp	eax, 34
      14: 76 21                        	jbe	0x37 <strtoull+0x37>
      16: e8 fc ff ff ff               	call	0x17 <strtoull+0x17>
			00000017:  R_386_PC32	__thread_local_errno_
      1b: c7 00 07 00 00 00            	mov	dword ptr [eax], 7
      21: e9 d5 00 00 00               	jmp	0xfb <strtoull+0xfb>
      26: 83 ec 0c                     	sub	esp, 12
      29: 50                           	push	eax
      2a: e8 fc ff ff ff               	call	0x2b <strtoull+0x2b>
			0000002b:  R_386_PC32	isspace
      2f: 83 c4 10                     	add	esp, 16
      32: 85 c0                        	test	eax, eax
      34: 74 0c                        	je	0x42 <strtoull+0x42>
      36: 43                           	inc	ebx
      37: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      3a: 0f be 04 18                  	movsx	eax, byte ptr [eax + ebx]
      3e: 84 c0                        	test	al, al
      40: 75 e4                        	jne	0x26 <strtoull+0x26>
      42: 8b 45 08                     	mov	eax, dword ptr [ebp + 8]
      45: 8a 04 18                     	mov	al, byte ptr [eax + ebx]
      48: 3c 2b                        	cmp	al, 43
      4a: 75 07                        	jne	0x53 <strtoull+0x53>
      4c: c6 45 df 00                  	mov	byte ptr [ebp - 33], 0
      50: 43                           	inc	ebx
      51: eb 0d                        	jmp	0x60 <strtoull+0x60>
      53: c6 45 df 00                  	mov	byte ptr [ebp - 33], 0
      57: 3c 2d                        	cmp	al, 45
      59: 75 05                        	jne	0x60 <strtoull+0x60>
      5b: c6 45 df 01                  	mov	byte ptr [ebp - 33], 1
      5f: 43                           	inc	ebx
      60: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
      63: c6 45 e0 00                  	mov	byte ptr [ebp - 32], 0
      67: 31 f6                        	xor	esi, esi
      69: 31 ff                        	xor	edi, edi
      6b: 03 5d 08                     	add	ebx, dword ptr [ebp + 8]
      6e: 99                           	cdq
      6f: 89 45 d0                     	mov	dword ptr [ebp - 48], eax
      72: 89 55 d4                     	mov	dword ptr [ebp - 44], edx
      75: eb 24                        	jmp	0x9b <strtoull+0x9b>
      77: 8b 75 e0                     	mov	esi, dword ptr [ebp - 32]
      7a: 8b 7d e4                     	mov	edi, dword ptr [ebp - 28]
      7d: 99                           	cdq
      7e: 81 c7 00 00 00 80            	add	edi, 2147483648
      84: 39 c6                        	cmp	esi, eax
      86: 19 d7                        	sbb	edi, edx
      88: 70 66                        	jo	0xf0 <strtoull+0xf0>
      8a: 8b 75 e0                     	mov	esi, dword ptr [ebp - 32]
      8d: 8b 7d e4                     	mov	edi, dword ptr [ebp - 28]
      90: 29 c6                        	sub	esi, eax
      92: 19 d7                        	sbb	edi, edx
      94: 8a 45 de                     	mov	al, byte ptr [ebp - 34]
      97: 43                           	inc	ebx
      98: 88 45 e0                     	mov	byte ptr [ebp - 32], al
      9b: 0f be 03                     	movsx	eax, byte ptr [ebx]
      9e: 84 c0                        	test	al, al
      a0: 74 5f                        	je	0x101 <strtoull+0x101>
      a2: 8b 55 10                     	mov	edx, dword ptr [ebp + 16]
      a5: e8 fc ff ff ff               	call	0xa6 <strtoull+0xa6>
			000000a6:  R_386_PC32	.text.IsDigitInBase
      aa: 88 45 de                     	mov	byte ptr [ebp - 34], al
      ad: 84 c0                        	test	al, al
      af: 74 50                        	je	0x101 <strtoull+0x101>
      b1: 8b 4d d4                     	mov	ecx, dword ptr [ebp - 44]
      b4: 8b 45 10                     	mov	eax, dword ptr [ebp + 16]
      b7: 83 ec 0c                     	sub	esp, 12
      ba: 0f af c7                     	imul	eax, edi
      bd: 0f af ce                     	imul	ecx, esi
      c0: 01 c1                        	add	ecx, eax
      c2: 89 f0                        	mov	eax, esi
      c4: f7 65 10                     	mul	dword ptr [ebp + 16]
      c7: 89 45 e0                     	mov	dword ptr [ebp - 32], eax
      ca: 0f be 03                     	movsx	eax, byte ptr [ebx]
      cd: 89 55 e4                     	mov	dword ptr [ebp - 28], edx
      d0: 01 4d e4                     	add	dword ptr [ebp - 28], ecx
      d3: 50                           	push	eax
      d4: e8 fc ff ff ff               	call	0xd5 <strtoull+0xd5>
			000000d5:  R_386_PC32	isdigit
      d9: 83 c4 10                     	add	esp, 16
      dc: 85 c0                        	test	eax, eax
      de: 0f be 03                     	movsx	eax, byte ptr [ebx]
      e1: 74 35                        	je	0x118 <strtoull+0x118>
      e3: 83 e8 30                     	sub	eax, 48
      e6: 80 7d df 00                  	cmp	byte ptr [ebp - 33], 0
      ea: 74 3d                        	je	0x129 <strtoull+0x129>
      ec: 85 c0                        	test	eax, eax
      ee: 7e 87                        	jle	0x77 <strtoull+0x77>
      f0: e8 fc ff ff ff               	call	0xf1 <strtoull+0xf1>
			000000f1:  R_386_PC32	__thread_local_errno_
      f5: c7 00 16 00 00 00            	mov	dword ptr [eax], 22
      fb: 31 f6                        	xor	esi, esi
      fd: 31 ff                        	xor	edi, edi
      ff: eb 5c                        	jmp	0x15d <strtoull+0x15d>
     101: 83 7d 0c 00                  	cmp	dword ptr [ebp + 12], 0
     105: 74 56                        	je	0x15d <strtoull+0x15d>
     107: 8b 55 0c                     	mov	edx, dword ptr [ebp + 12]
     10a: 80 7d e0 00                  	cmp	byte ptr [ebp - 32], 0
     10e: 89 d8                        	mov	eax, ebx
     110: 0f 44 45 08                  	cmove	eax, dword ptr [ebp + 8]
     114: 89 02                        	mov	dword ptr [edx], eax
     116: eb 45                        	jmp	0x15d <strtoull+0x15d>
     118: 83 ec 0c                     	sub	esp, 12
     11b: 50                           	push	eax
     11c: e8 fc ff ff ff               	call	0x11d <strtoull+0x11d>
			0000011d:  R_386_PC32	tolower
     121: 83 c4 10                     	add	esp, 16
     124: 83 e8 57                     	sub	eax, 87
     127: eb bd                        	jmp	0xe6 <strtoull+0xe6>
     129: 8b 75 e0                     	mov	esi, dword ptr [ebp - 32]
     12c: 8b 7d e4                     	mov	edi, dword ptr [ebp - 28]
     12f: 99                           	cdq
     130: 81 c7 00 00 00 80            	add	edi, 2147483648
     136: 01 c6                        	add	esi, eax
     138: 11 d7                        	adc	edi, edx
     13a: 71 12                        	jno	0x14e <strtoull+0x14e>
     13c: e8 fc ff ff ff               	call	0x13d <strtoull+0x13d>
			0000013d:  R_386_PC32	__thread_local_errno_
     141: 83 ce ff                     	or	esi, -1
     144: c7 00 16 00 00 00            	mov	dword ptr [eax], 22
     14a: 89 f7                        	mov	edi, esi
     14c: eb 0f                        	jmp	0x15d <strtoull+0x15d>
     14e: 8b 75 e0                     	mov	esi, dword ptr [ebp - 32]
     151: 8b 7d e4                     	mov	edi, dword ptr [ebp - 28]
     154: 01 c6                        	add	esi, eax
     156: 11 d7                        	adc	edi, edx
     158: e9 37 ff ff ff               	jmp	0x94 <strtoull+0x94>
     15d: 8d 65 f4                     	lea	esp, [ebp - 12]
     160: 89 f0                        	mov	eax, esi
     162: 89 fa                        	mov	edx, edi
     164: 5b                           	pop	ebx
     165: 5e                           	pop	esi
     166: 5f                           	pop	edi
     167: 5d                           	pop	ebp
     168: c3                           	ret
